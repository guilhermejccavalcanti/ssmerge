/* Generated By:JavaCC: Do not edit this line. TraversalLanguageParser.java */
package modification.traversalLanguageParser;

import java.io.Reader;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;

import modification.traversalLanguageParser.addressManagement.NameTypePatternToken;
import modification.traversalLanguageParser.addressManagement.TreeAddress;
import modification.traversalLanguageParser.addressManagement.TreeAddressToken;
import modification.traversalLanguageParser.addressManagement.WildcardToken;
import de.ovgu.cide.fstgen.ast.FSTNode;
import de.ovgu.cide.fstgen.ast.FSTNonTerminal;

public class TraversalLanguageParser implements TraversalLanguageParserConstants {
        /**    *     */
        private FSTNode root = null;

        /**	*	*/
        private static final String JAVA_REGEX_PATTERN_STRING_WILDCARD = "(.)*";

        /**    *     */
    public List<FSTNode> parse() throws ParseException {
                return expression();
    }

        /**    *     */
    public TraversalLanguageParser(String traversal, FSTNode root) {
                this((Reader) (new StringReader(traversal)));
                this.root=root;
    }

    /**    *     */
    private List<FSTNode> minus(List<FSTNode> a, List<FSTNode> b) {
        List<FSTNode> result = new LinkedList<FSTNode>(a);
                result.removeAll(b);
        return result;
    }

    /**    *     */
    private List<FSTNode> and(List<FSTNode> a, List<FSTNode> b) {
                List<FSTNode> result = new LinkedList<FSTNode>(a);
                result.retainAll(b);
        return result;
    }

    /**    *     */
    private List<FSTNode> or(List<FSTNode> a, List<FSTNode> b) {
                List<FSTNode> result = new LinkedList<FSTNode>(a);
                result.removeAll(b);
                result.addAll(b);
        return result;
    }

    /**    *     */
    private List<FSTNode> addSiblings(List<FSTNode> l) {
                List<FSTNode> result = new LinkedList<FSTNode>(l);
                for (FSTNode n : l) {
                        if (n.getParent() != null)
                                for (FSTNode sib: ((FSTNonTerminal)n.getParent()).getChildren()) {
                                        if (n != sib)
                                                result.add(sib);
                                }
                }
        return result;
    }

/*** independent expression*/
  final public List<FSTNode> expression() throws ParseException {
        List<FSTNode> nodeListOp1 = new LinkedList<FSTNode>();
        List<FSTNode> nodeListOp2 = new LinkedList<FSTNode>();
        List<FSTNode> nodeListRes = new LinkedList<FSTNode>();
    nodeListOp1 = traversalTerm();
         nodeListRes = nodeListOp1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
      case INTERSECTION:
      case MINUS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        jj_consume_token(UNION);
        nodeListOp2 = traversalTerm();
                 nodeListRes = nodeListOp1 = or(nodeListOp1, nodeListOp2);
        break;
      case INTERSECTION:
        jj_consume_token(INTERSECTION);
        nodeListOp2 = traversalTerm();
                 nodeListRes = nodeListOp1 = and(nodeListOp1, nodeListOp2);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        nodeListOp2 = traversalTerm();
                 nodeListRes = nodeListOp1 = minus(nodeListOp1, nodeListOp2);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
         {if (true) return nodeListRes;}
    throw new Error("Missing return statement in function");
  }

/*** traversal term without operators outside braces*/
  final public List<FSTNode> traversalTerm() throws ParseException {
        List<FSTNode> nodeList = new LinkedList<FSTNode>();
        TreeAddress treeAddress;
        TreeAddress conditionalTreeAddress;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACE:
      jj_consume_token(LEFT_BRACE);
      nodeList = expression();
      jj_consume_token(RIGHT_BRACE);
                         {if (true) return nodeList;}
      break;
    case ADDRESS_WILDCARD:
    case STRING_WILDCARD:
    case NUMBER:
    case SMALL_CHARACTER:
    case GREAT_CHARACTER:
    case ANY_CHAR:
    case LITERAL_START_FLAG:
      treeAddress = treeAddress();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COND_LEFT_BRACE:
        jj_consume_token(COND_LEFT_BRACE);
        conditionalTreeAddress = treeAddress();
        jj_consume_token(COND_RIGHT_BRACE);
                                        for (FSTNode n : treeAddress.resolve(root)) {
                                                if (conditionalTreeAddress.resolve(n).size() > 0)
                                                        nodeList.add(n);
                                        }
                                        {if (true) return nodeList;}
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
                         {if (true) return treeAddress.resolve(root);}
      break;
    case ADDSIB:
      jj_consume_token(ADDSIB);
      treeAddress = treeAddress();
                         {if (true) return addSiblings(treeAddress.resolve(root));}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*** single tree address without operators. * Differentiation with "|" to suppress the empty string.* splits off <ADDRESS_WILDCARD>s to treat seperately.*/
  final public TreeAddress treeAddress() throws ParseException {
        List<TreeAddressToken> tokenList = new LinkedList<TreeAddressToken>();
        List<TreeAddressToken> tempTokenList;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WILDCARD:
    case NUMBER:
    case SMALL_CHARACTER:
    case GREAT_CHARACTER:
    case ANY_CHAR:
    case LITERAL_START_FLAG:
      tempTokenList = literalAddress();
                         tokenList.addAll(tempTokenList);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDRESS_WILDCARD:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(ADDRESS_WILDCARD);
                                 tokenList.add(new WildcardToken());
        tempTokenList = literalAddress();
                                 tokenList.addAll(tempTokenList);
      }
      break;
    case ADDRESS_WILDCARD:
      label_3:
      while (true) {
        jj_consume_token(ADDRESS_WILDCARD);
                         tokenList.add(new WildcardToken());
        tempTokenList = literalAddress();
                         tokenList.addAll(tempTokenList);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDRESS_WILDCARD:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return new TreeAddress(tokenList);}
    throw new Error("Missing return statement in function");
  }

/*** literalAddress consisting of nameTypePatternTokens and <ADDRESS_DIVIDER>s*/
  final public List<TreeAddressToken> literalAddress() throws ParseException {
        List<TreeAddressToken> tokenList = new LinkedList<TreeAddressToken>();
        TreeAddressToken token;
    token = nameTypePatternToken();
         tokenList.add(token);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDRESS_DIVIDER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(ADDRESS_DIVIDER);
      token = nameTypePatternToken();
                 tokenList.add(token);
    }
         {if (true) return tokenList;}
    throw new Error("Missing return statement in function");
  }

/*** tokens split by <ADDRESS_DIVIDER> in literal addresses*/
  final public TreeAddressToken nameTypePatternToken() throws ParseException {
        String name;
        String type;
    name = name();
    jj_consume_token(TYPE_DIVIDER);
    type = type();
         {if (true) return new NameTypePatternToken(name,type);}
    throw new Error("Missing return statement in function");
  }

/*** regex pattern for name part of nameTypePatternTokens*/
  final public String name() throws ParseException {
        String name;
    name = stringWithWildcards();
         {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

/*** regex pattern for type part of nameTypePatternTokens*/
  final public String type() throws ParseException {
        String type;
    type = stringWithWildcards();
         {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

/*** contains <STRING_WILDCARD>s and words mixed up in different ways*/
  final public String stringWithWildcards() throws ParseException {
        String result = "";
        Token t;
        String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WILDCARD:
      jj_consume_token(STRING_WILDCARD);
                         result = result.concat(JAVA_REGEX_PATTERN_STRING_WILDCARD);
      s = wildcardExtension();
                         result = result.concat(s.toString());
      break;
    case NUMBER:
    case SMALL_CHARACTER:
    case GREAT_CHARACTER:
    case ANY_CHAR:
    case LITERAL_START_FLAG:
      s = word();
                         result = result.concat(s.toString());
      s = wordExtension();
                         result = result.concat(s.toString());
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*** possible extends for word*/
  final public String wordExtension() throws ParseException {
        String result = "";
        Token t;
        String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_WILDCARD:
      jj_consume_token(STRING_WILDCARD);
                         result = result.concat(JAVA_REGEX_PATTERN_STRING_WILDCARD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case SMALL_CHARACTER:
      case GREAT_CHARACTER:
      case ANY_CHAR:
      case LITERAL_START_FLAG:
        s = word();
                                 result = result.concat(s.toString());
        s = wordExtension();
                                 result = result.concat(s.toString());
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*** possible extends for <STRING_WILDCARD>*/
  final public String wildcardExtension() throws ParseException {
        String result = "";
        Token t;
        String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case SMALL_CHARACTER:
    case GREAT_CHARACTER:
    case ANY_CHAR:
    case LITERAL_START_FLAG:
      s = word();
                         result = result.concat(s.toString());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_WILDCARD:
        jj_consume_token(STRING_WILDCARD);
                                 result = result.concat(JAVA_REGEX_PATTERN_STRING_WILDCARD);
        s = wildcardExtension();
                                 result = result.concat(s.toString());
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*** word is consisting of <SMALL_CHARACTER>s, <GREAT_CHARACTER>s, * <NUMBER>s and specialCharacters (treated seperately)*/
  final public String word() throws ParseException {
        String m;
        String s = "";
        Token t;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMALL_CHARACTER:
        t = jj_consume_token(SMALL_CHARACTER);
                 s = s.concat("\\Q" + t.toString() + "\\E");
        break;
      case GREAT_CHARACTER:
        t = jj_consume_token(GREAT_CHARACTER);
                 s = s.concat("\\Q" + t.toString() + "\\E");
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
                 s = s.concat("\\Q" + t.toString() + "\\E");
        break;
      case ANY_CHAR:
        t = jj_consume_token(ANY_CHAR);
                 s = s.concat("\\Q" + t.toString() + "\\E");
        break;
      case LITERAL_START_FLAG:
        m = literalString();
                 s = s.concat(m);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case SMALL_CHARACTER:
      case GREAT_CHARACTER:
      case ANY_CHAR:
      case LITERAL_START_FLAG:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
    }
         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String literalString() throws ParseException {
        String s = "";
        Token t;
    jj_consume_token(LITERAL_START_FLAG);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY_CHAR_LITERAL:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(ANY_CHAR_LITERAL);
                         s = s.concat("\\Q" + t.toString() + "\\E");
    }
    jj_consume_token(LITERAL_END_FLAG);
         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  public TraversalLanguageParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xe0,0xe0,0x4000,0x3e9900,0x800,0x800,0x3e1800,0x200,0x3e1000,0x3e0000,0x1000,0x1000,0x3e0000,0x3e0000,0x3e0000,0x800000,};
   }

  public TraversalLanguageParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public TraversalLanguageParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TraversalLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public TraversalLanguageParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TraversalLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public TraversalLanguageParser(TraversalLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(TraversalLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[24];
    for (int i = 0; i < 24; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
