revision;file;methodsignature;leftbody;basebody;rightbody
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_1e5f9_a143d/rev_1e5f9-a143d;/src/java/org/apache/cassandra/service/StorageService;joinTokenRing();            SystemTable.setBootstrapped(true); // first startup is only chance to bootstrap
            setToken(token);
        };        } 

        SystemTable.setBootstrapped(true); // first startup is only chance to bootstrap
        setToken(token);;        } 

        SystemTable.setBootstrapped(true); // first startup is only chance to bootstrap
        setToken(token);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_1f4c6_23c62/rev_1f4c6-23c62;/lucene/src/java/org/apache/lucene/index/IndexWriter;addIndexes(IndexReader);        ;        info.setUseCompoundFile(true);
        ;        info.setUseCompoundFile(true);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_2d04a_68356/rev_2d04a-68356;/src/main/java/redis/clients/jedis/Jedis;blpop(String);public List<String> blpop(String... args) {
	client.blpop(args);
	client.setTimeoutInfinite();
	final List<String> multiBulkReply = client.getMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<String> blpop(String... args) {
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<String> blpop(String arg) {
        String[] args = new String[1];
        args[0] = arg;
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_2d04a_68356/rev_2d04a-68356;/src/main/java/redis/clients/jedis/Jedis;brpop(String);public List<String> brpop(String... args) {
	client.brpop(args);
	client.setTimeoutInfinite();
	final List<String> multiBulkReply = client.getMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<String> brpop(String... args) {
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<String> brpop(String arg) {
        String[] args = new String[1];
        args[0] = arg;
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_junit/revisions/rev_2f879_6fb53/rev_2f879-6fb53;/src/main/java/org/junit/rules/TestWatcher;apply(Statement,Description);                startingQuietly(description, errors);
                try {
                    base.evaluate();
                    succeededQuietly(description, errors);
                } catch (AssumptionViolatedException e) {
                    skipped(e, description);
                    throw e;
                } catch (Throwable t) {
                    errors.add(t);
                    failedQuietly(t, description, errors);
                } finally {
                    finishedQuietly(description, errors);
                }

                MultipleFailureException.assertEmpty(errors);
            }
        };
    };				startingQuietly(description, errors);
				try {
					base.evaluate();
					succeededQuietly(description, errors);
				} catch (AssumptionViolatedException e) {
					skipped(e, description);
					throw e;
				} catch (Throwable t) {
					errors.add(t);
					failedQuietly(t, description, errors);
				} finally {
					finishedQuietly(description, errors);
				}
				
				MultipleFailureException.assertEmpty(errors);
			}
		};
	};				startingQuietly(description, errors);
				try {
					base.evaluate();
					succeededQuietly(description, errors);
				} catch (AssumptionViolatedException e) {
					errors.add(e);
					skippedQuietly(e, description, errors);
				} catch (Throwable t) {
					errors.add(t);
					failedQuietly(t, description, errors);
				} finally {
					finishedQuietly(description, errors);
				}
				
				MultipleFailureException.assertEmpty(errors);
			}
		};
	}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_junit/revisions/rev_2f879_bbacb/rev_2f879-bbacb;/src/main/java/org/junit/runners/BlockJUnit4ClassRunner;getMethodRules(Object);@SuppressWarnings("deprecation")
    private List<org.junit.rules.MethodRule> getMethodRules(Object target) {
        return rules(target);
    };@SuppressWarnings("deprecation")
	private List<org.junit.rules.MethodRule> getMethodRules(Object target) {
		return rules(target);
	};private List<org.junit.rules.MethodRule> getMethodRules(Object target) {
		return rules(target);
	}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_junit/revisions/rev_2f879_bbacb/rev_2f879-bbacb;/src/main/java/org/junit/runners/BlockJUnit4ClassRunner;rules(Object);@Deprecated
    protected List<org.junit.rules.MethodRule> rules(Object target) {
        return getTestClass().getAnnotatedFieldValues(target, Rule.class,
                org.junit.rules.MethodRule.class);
    };@Deprecated
	protected List<org.junit.rules.MethodRule> rules(Object target) {
		return getTestClass().getAnnotatedFieldValues(target, Rule.class,
				org.junit.rules.MethodRule.class);
	};protected List<org.junit.rules.MethodRule> rules(Object target) {
		return getTestClass().getAnnotatedFieldValues(target, Rule.class,
				org.junit.rules.MethodRule.class);
	}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_03c0a_360e2/rev_03c0a-360e2;/src/main/java/redis/clients/jedis/Transaction;exec();	client.exec();
	client.getAll(1); // Discard all but the last reply;        client.exec();
        client.getAll(1); // Discard all but the last reply;    	// Discard QUEUED or ERROR
    	client.getMany(getPipelinedResponseLength());
    	
        client.exec();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_03c0a_360e2/rev_03c0a-360e2;/src/main/java/redis/clients/jedis/Transaction;execGetResponse();	client.exec();
	client.getAll(1); // Discard all but the last reply;        client.exec();
        client.getAll(1); // Discard all but the last reply;    	// Discard QUEUED or ERROR
    	client.getMany(getPipelinedResponseLength());
    	
        client.exec();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_03c0a_360e2/rev_03c0a-360e2;/src/main/java/redis/clients/jedis/Transaction;discard();	client.discard();
	client.getAll(1); // Discard all but the last reply
	inTransaction = false;
	clean();
	return client.getStatusCodeReply();;        client.discard();
        client.getAll(1); // Discard all but the last reply
        inTransaction = false;
        clean();
        return client.getStatusCodeReply();;    	client.getMany(getPipelinedResponseLength());
        client.discard();
        inTransaction = false;
        clean();
        return client.getStatusCodeReply();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_03c0a_360e2/rev_03c0a-360e2;/src/main/java/redis/clients/jedis/BinaryJedis;blpop(byte[]);public List<byte[]> blpop(byte[] arg) {
	checkIsInMulti();
	byte[][] args = new byte[1][];
	args[0] = arg;
	client.blpop(args);
	client.setTimeoutInfinite();
	final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<byte[]> blpop(byte[] arg) {
        checkIsInMulti();
        byte[][] args = new byte[1][];
        args[0] = arg;
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<byte[]> blpop(byte[]... args) {
        checkIsInMulti();
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_03c0a_360e2/rev_03c0a-360e2;/src/main/java/redis/clients/jedis/BinaryJedis;brpop(byte[]);public List<byte[]> brpop(byte[] arg) {
	checkIsInMulti();
	byte[][] args = new byte[1][];
	args[0] = arg;
	client.brpop(args);
	client.setTimeoutInfinite();
	final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<byte[]> brpop(byte[] arg) {
        checkIsInMulti();
        byte[][] args = new byte[1][];
        args[0] = arg;
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<byte[]> brpop(byte[]... args) {
        checkIsInMulti();
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_3b334_0de64/rev_3b334-0de64;/projects/OG-Analytics/src/main/java/com/opengamma/analytics/financial/model/volatility/smile/fitting/interpolation/SmileInterpolatorSpline;getVolatilityFunction(double,double[],double,double[]);    final Function1D<Double, Double> dSigmaDx = DIFFERENTIATOR.differentiate(interpFunc, domain);
    
    // The 'quiet' method reduces smile if the volatility gradient is either out of bounds of ShiftedLognormal model, or if root-finder fails to find solution
    if (_extrapolatorFailureBehaviour.equalsIgnoreCase(s_quiet)) {;    
    // FIXME - Remove this hard-coded behaviour, and set up as a Property which can be set
    // By simply passing in a target gradient of zero, we will produce a 'FLAT EXTRAPOLATION'
    final Function1D<Double, Double> returnZero = new Function1D<Double, Double>() {
      @Override
      public Double evaluate(final Double k) {
        return 0.0;
      }
    };
    final Function1D<Double, Double> dSigmaDx = returnZero;
    
    // !!! The line below, instead, computes the derivative using the interpolator
    //final Function1D<Double, Double> dSigmaDx = DIFFERENTIATOR.differentiate(interpFunc, domain);
    
    if (_extrapolatorFailureBehaviour.equalsIgnoreCase("Quiet")) {
      
      // The current *hard-coded* method reduces smile if the volatility gradient is either out of bounds of ShiftedLognormal model, or if root-finder fails to find solution;
    // FIXME - Remove this hard-coded behaviour, and set up as a Property which can be set
    // By simply passing in a target gradient of zero, we will produce a 'FLAT EXTRAPOLATION'
    final Function1D<Double, Double> returnZero = new Function1D<Double, Double>() {
      @Override
      public Double evaluate(final Double k) {
        return 0.0;
      }
    };
    final Function1D<Double, Double> dSigmaDx = returnZero;

    // !!! The line below, instead, computes the derivative using the interpolator
    //final Function1D<Double, Double> dSigmaDx = DIFFERENTIATOR.differentiate(interpFunc, domain);

    if (_extrapolatorFailureBehaviour.equalsIgnoreCase("Quiet")) {

      // The current *hard-coded* method reduces smile if the volatility gradient is either out of bounds of ShiftedLognormal model, or if root-finder fails to find solution
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_3c795_72d30/rev_3c795-72d30;/projects/OG-Web/src/com/opengamma/web/spring/DemoStandardFunctionConfiguration;addBlackCalculators(List<FunctionConfiguration>);    functionConfigs.add(new ParameterizedFunctionConfiguration(InterestRateFutureOptionBlackDefaultPropertiesFunction.class.getName(),
        Arrays.asList("FORWARD_3M", "FUNDING", "DEFAULT", "PresentValue", "USD", "EUR")));;    functionConfigs.add(new ParameterizedFunctionConfiguration(InterestRateFutureOptionBlackDefaultPropertiesFunction.class.getName(), 
        Arrays.asList("FORWARD_3M", "FUNDING", "DEFAULT", "PresentValue", "USD", "EUR")));;    functionConfigs.add(functionConfiguration(InterestRateFutureOptionBlackYieldCurveNodeSensitivitiesFunction.class));
    functionConfigs.add(functionConfiguration(InterestRateFutureOptionBlackGammaFunction.class));
    functionConfigs.add(new ParameterizedFunctionConfiguration(InterestRateFutureOptionBlackDefaultPropertiesFunction.class.getName(), 
        Arrays.asList("FORWARD_3M", "FUNDING", "DEFAULT", "PresentValue", "USD", "EUR")));  // TODO Change FORWARD_3M to FUTURES once available in db
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_3d10f_0de41/rev_3d10f-0de41;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/math/interpolation/MonotoneConvexSplineInterpolatorTest;knotsControlTest1();    final double[] xValues = new double[] {1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27. };
    final double[] yValues = new double[] {3., 2., 2., 2., 3., 2.5, 2., 2., 3., 3., 2.5, 2., 2., 4., 5., 5., 4.9, 5., 6., 8., 3., -2., -1.5, -1., -2., -1.5, -1., };
    final int nData = xValues.length;
    double[] yValuesInput = new double[nData];
    for (int i = 0; i < nData; ++i) {
      yValuesInput[i] = yValues[i] * xValues[i];
    }

    final double[][] xValuesMatrix = new double[][] { {1., 2. }, {3., 4. } };
    final double[] xValuesMod = new double[] {1., 2., 3., 4. + 1.e-14, 5., 6. + 1.e-14, 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27. };
    final double[][] xValuesModMatrix = new double[][] { {1., 2. }, {3., 4. + 1.e-14 } };
    final double[][] yValuesMatrix = new double[][] { {3., 2. }, {2., 2. } };;    final double[] xValues = new double[] {1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27. };
    final double[] yValues = new double[] {3., 2., 2., 2., 3., 2.5, 2., 2., 3., 3., 2.5, 2., 2., 4., 5., 5., 4.9, 5., 6., 8., 3., -2., -1.5, -1., -2., -1.5, -1., };
    final double[][] xValuesMatrix = new double[][] { {1., 2. }, {3., 4. } };
    final double[] xValuesMod = new double[] {1., 2., 3., 4. + 1.e-14, 5., 6. + 1.e-14, 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27. };
    final double[][] xValuesModMatrix = new double[][] { {1., 2. }, {3., 4. + 1.e-14 } };
    final double[][] yValuesMatrix = new double[][] { {3., 2. }, {2., 2. } };;    final double[] xValues = new double[] {1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27.};
    final double[] yValues = new double[] {3., 2., 2., 2., 3., 2.5, 2., 2., 3., 3., 2.5, 2., 2., 4., 5., 5., 4.9, 5., 6., 8., 3., -2., -1.5, -1., -2., -1.5, -1.,};
    final double[][] xValuesMatrix = new double[][] { {1., 2.}, {3., 4.}};
    final double[] xValuesMod = new double[] {1., 2., 3., 4. + 1.e-14, 5., 6. + 1.e-14, 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27.};
    final double[][] xValuesModMatrix = new double[][] { {1., 2.}, {3., 4. + 1.e-14}};
    final double[][] yValuesMatrix = new double[][] { {3., 2.}, {2., 2.}};
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_3d10f_0de41/rev_3d10f-0de41;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/math/interpolation/MonotoneConvexSplineInterpolatorTest;knotsControlTest1();    final double[] modifiedFwds = new double[] {0.75, 1.5, 2., 4., 0., -2, -2, 4., 6., -5., -7., -7., 4., 24.5, 10., 4.15, 5., 13.4, 35., -194., -214., -214., 10., -52., -52., 11.5, 12.25, };
    final double[][] modifiedFwdsMatrix = new double[][] { {0.75, 1.5 }, {2., 4. } };;    final double[] modifiedFwds = new double[] {0.75, 1.5, 2., 4., 0., -2, -2, 4., 6., -5., -7., -7., 4., 24.5, 10., 4.15, 5., 13.4, 35., -194., -214., -214., 10., -52., -52., 11.5, 12.25, };
    final double[][] modifiedFwdsMatrix = new double[][] { {0.75, 1.5 }, {2., 4. } };
    final int nData = xValues.length;;    final double[] modifiedFwds = new double[] {0.75, 1.5, 2., 4., 0., -2, -2, 4., 6., -5., -7., -7., 4., 24.5, 10., 4.15, 5., 13.4, 35., -194., -214., -214., 10., -52., -52., 11.5, 12.25,};
    final double[][] modifiedFwdsMatrix = new double[][] { {0.75, 1.5}, {2., 4.}};
    final int nData = xValues.length;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_3d10f_0de41/rev_3d10f-0de41;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/math/interpolation/MonotoneConvexSplineInterpolatorTest;constTest();    final double[] xValues = new double[] {1., 2., 3., 4., 5., 6. };
    final double[] yValuesTmp = new double[] {1., 1., 1., 1., 1., 1. };
    final int nData = xValues.length;
    final double[] yValues = new double[nData];
    for (int i = 0; i < xValues.length; ++i) {
      yValues[i] = yValuesTmp[i] * xValues[i];
    };    final double[] xValues = new double[] {1., 2., 3., 4., 5., 6. };
    final double[] yValues = new double[] {1., 1., 1., 1., 1., 1. };;    final double[] xValues = new double[] {1., 2., 3., 4., 5., 6.};
    final double[] yValues = new double[] {1., 1., 1., 1., 1., 1.};
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_3d10f_0de41/rev_3d10f-0de41;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/math/interpolation/MonotoneConvexSplineInterpolatorTest;positiveTest();    final double[] xValues = new double[] {0., 0.1, 1., 2., 6., 9., 30 };
    final double[] yValues = new double[] {0., 2., 2., 2., 3., 2., 1. };
    final int nData = xValues.length;
    double[] yValuesInput = new double[nData];
    for (int i = 0; i < nData; ++i) {
      yValuesInput[i] = xValues[i] * yValues[i];
    };    final double[] xValues = new double[] {0., 0.1, 1., 2., 6., 9., 30 };
    final double[] yValues = new double[] {0., 2., 2., 2., 3., 2., 1. };;    final double[] xValues = new double[] {0., 0.1, 1., 2., 6., 9., 30};
    final double[] yValues = new double[] {0., 2., 2., 2., 3., 2., 1.};
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_3d10f_0de41/rev_3d10f-0de41;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/math/interpolation/MonotoneConvexSplineInterpolatorTest;monotonicTest();    final double[] xValues = new double[] {0., 0.3, 0.6, 1.5, 2.7, 3.4, 4.8, 5.9 };
    final int nData = xValues.length;
    final double[] yValuesTmp = new double[] {1.0, 1.2, 1.5, 2.0, 2.1, 3.0, 3.1, 3.3 };
    double[] yValues = new double[nData];
    for (int i = 0; i < nData; ++i) {
      yValues[i] = yValuesTmp[i] * xValues[i];
    };    final double[] xValues = new double[] {0., 0.3, 0.6, 1.5, 2.7, 3.4, 4.8, 5.9 };
    final double[] yValues = new double[] {1.0, 1.2, 1.5, 2.0, 2.1, 3.0, 3.1, 3.3 };;    final double[] xValues = new double[] {0., 0.3, 0.6, 1.5, 2.7, 3.4, 4.8, 5.9};
    final double[] yValues = new double[] {1.0, 1.2, 1.5, 2.0, 2.1, 3.0, 3.1, 3.3};
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_3edc1_1ef9b/rev_3edc1-1ef9b;/tests/unit/com/opengamma/math/rootfinding/MultiInstrumentDoubleCurveBootstrapTest;testNewton();    // VectorRootFinder rootFinder = new NewtonDefaultVectorRootFinder(EPS, EPS, STEPS);
    // doHotSpot(rootFinder, "default Newton FD , double curve", DOUBLE_CURVE_FINDER);

    VectorRootFinder rootFinder = new NewtonDefaultVectorRootFinder(EPS, EPS, STEPS, DOUBLE_CURVE_JACOBIAN,
        new SVDecompositionCommons());;    // VectorRootFinder rootFinder = new NewtonDefaultVectorRootFinder(EPS, EPS, STEPS);
    // doHotSpot(rootFinder, "default Newton FD , double curve", DOUBLE_CURVE_FINDER);

    VectorRootFinder rootFinder = new NewtonDefaultVectorRootFinder(EPS, EPS, STEPS, DOUBLE_CURVE_JACOBIAN, new SVDecompositionCommons());;    VectorRootFinder rootFinder = new NewtonDefaultVectorRootFinder(EPS, EPS, STEPS, DOUBLE_CURVE_JACOBIAN);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_3eec4_24b48/rev_3eec4-24b48;/projects/OG-Financial/src/com/opengamma/financial/analytics/fixedincome/FixedIncomeInstrumentCurveExposureHelper;getCurveNamesForSecurity(FinancialSecurity,String,String);        return new String[] {fundingCurveName, forwardCurveName};
      case BOND_FUTURE:
        return new String[] {fundingCurveName, fundingCurveName};;        return new String[] {fundingCurveName, forwardCurveName};;        return new String[] {fundingCurveName, forwardCurveName };
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig;testInvalidValues();    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));
    ;    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());
    ;    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testCommitOnClose();        Directory dir = newDirectory();      
        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));;        Directory dir = newDirectory();      
        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));;        Directory dir = newDirectory();
        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testCommitOnCloseAbort();      MockDirectoryWrapper dir = newDirectory();      
      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10));;      MockDirectoryWrapper dir = newDirectory();      
      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));;      MockDirectoryWrapper dir = newDirectory();
      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testIndexNoDocuments();      MockDirectoryWrapper dir = newDirectory();      
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));;      MockDirectoryWrapper dir = newDirectory();      
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));;      MockDirectoryWrapper dir = newDirectory();
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testManyFields();      MockDirectoryWrapper dir = newDirectory();      
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10));;      MockDirectoryWrapper dir = newDirectory();      
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));;      MockDirectoryWrapper dir = newDirectory();
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testDiverseDocs();      MockDirectoryWrapper dir = newDirectory();      
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.5));;      MockDirectoryWrapper dir = newDirectory();      
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5));;      MockDirectoryWrapper dir = newDirectory();
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testEnablingNorms();      MockDirectoryWrapper dir = newDirectory();      
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10));;      MockDirectoryWrapper dir = newDirectory();      
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));;      MockDirectoryWrapper dir = newDirectory();
      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testBadSegment();        TEST_VERSION_CURRENT, new MockAnalyzer(random)));
    ;        TEST_VERSION_CURRENT, new MockAnalyzer()));
    ;        TEST_VERSION_CURRENT, new MockAnalyzer()));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testExpungeDeletes();    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer(random));    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer());    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
        TEST_VERSION_CURRENT, new MockAnalyzer())
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testCommitUserData();      
    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));;      
    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));;
    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;run();            IndexWriterConfig conf = newIndexWriterConfig( 
                                                          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2);;            IndexWriterConfig conf = newIndexWriterConfig( 
                                                          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2);;            IndexWriterConfig conf = newIndexWriterConfig(
                                                          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testNoDocsIndex();    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer(random)));;    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer()));;    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
        TEST_VERSION_CURRENT, new MockAnalyzer()));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testCommitThreadSafety();    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig( 
                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));;    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig( 
                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));;    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(
                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testDeleteUnsedFiles2();    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer(random));    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer());    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
        TEST_VERSION_CURRENT, new MockAnalyzer())
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testEmptyDirRollback();    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer(random));    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer());    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(
        TEST_VERSION_CURRENT, new MockAnalyzer())
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testNoSegmentFile();    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));
    ;    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));
    ;    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(
        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4d8d5_6c29a/rev_4d8d5-6c29a;/lucene/src/test/org/apache/lucene/index/TestIndexWriter;testNoSegmentFile();    IndexWriter w2 = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2);    IndexWriter w2 = new IndexWriter(dir, newIndexWriterConfig( 
        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2);    IndexWriter w2 = new IndexWriter(dir, newIndexWriterConfig(
        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2)
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_4efe5_2c926/rev_4efe5-2c926;/lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput;Reader(IndexInput,int[],BlockReader);public Reader(final IndexInput in, final int[] pending, final BlockReader blockReader) {;public Reader(final IndexInput in, final int[] pending, final BlockReader blockReader)
    throws IOException {;public Reader(final IndexInput in, final int[] pending, final BlockReader blockReader)
      throws IOException {
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_4efe5_54581/rev_4efe5-54581;/src/com/opengamma/engine/test/CalculationNodeUtils;getCalculationJob(MockFunction);        function.getUniqueIdentifier(), function.getTarget().toSpecification(), function.getRequirements(), function.getResultRequirements());;        function.getUniqueIdentifier(), 
        function.getTarget().toSpecification(), 
        function.getRequirements(), 
        function.getResultRequirements());;        function.getUniqueIdentifier(), 
        function.getDefaultParameters(),
        function.getTarget().toSpecification(), 
        function.getRequirements(), 
        function.getResultRequirements());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_5d5f2_160ee/rev_5d5f2-160ee;/projects/OG-Financial/src/com/opengamma/financial/fudgemsg/VolatilitySurfaceSpeficiationBuilder;buildObject(FudgeDeserializationContext,FudgeMsg);      target = context.fieldValueToObject(UniqueIdentifiable.class, message.getByName("target"));;//      try {
        target = context.fieldValueToObject(UniqueIdentifiable.class, message.getByName("target"));
//      } catch (Exception fre) { // arghhhhhh
//        target = Currency.of(message.getString("target"));
//      };//      try {
      target = context.fieldValueToObject(UniqueIdentifiable.class, message.getByName("target"));
//      } catch (Exception fre) { // arghhhhhh
//        target = Currency.of(message.getString("target"));
//      }
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6a205_ef881/rev_6a205-ef881;/projects/OG-Financial/src/com/opengamma/financial/convention/InMemoryConventionBundleMaster;addConventionBundle(IdentifierBundle,String,DayCount,BusinessDayConvention,Frequency,int);    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, dayCount, businessDayConvention, frequency, settlementDays);
    return add(bundle, convention);;    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, dayCount, businessDayConvention, frequency, settlementDays);
    final UniqueIdentifier uid = _mapper.add(bundle, convention);
    convention.setUniqueId(uid);
    return uid;;    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, dayCount, businessDayConvention,
        frequency, settlementDays);
    final UniqueIdentifier uid = _mapper.add(bundle, convention);
    convention.setUniqueId(uid);
    return uid;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6a205_ef881/rev_6a205-ef881;/projects/OG-Financial/src/com/opengamma/financial/convention/InMemoryConventionBundleMaster;addConventionBundle(IdentifierBundle,String,DayCount,BusinessDayConvention,Frequency,int,double);    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, dayCount, businessDayConvention, frequency, settlementDays, yearFraction);
    return add(bundle, convention);;    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, dayCount, businessDayConvention, frequency, settlementDays, yearFraction);
    final UniqueIdentifier uid = _mapper.add(bundle, convention);
    convention.setUniqueId(uid);
    return uid;;    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, dayCount, businessDayConvention,
        frequency, settlementDays, yearFraction);
    final UniqueIdentifier uid = _mapper.add(bundle, convention);
    convention.setUniqueId(uid);
    return uid;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6a205_ef881/rev_6a205-ef881;/projects/OG-Financial/src/com/opengamma/financial/convention/InMemoryConventionBundleMaster;addConventionBundle(IdentifierBundle,String,DayCount,BusinessDayConvention,Period,int);    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, dayCount, businessDayConvention, period, settlementDays);
    return add(bundle, convention);;    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, dayCount, businessDayConvention, period, settlementDays);
    final UniqueIdentifier uid = _mapper.add(bundle, convention);
    convention.setUniqueId(uid);
    return uid;;    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, dayCount, businessDayConvention,
        period, settlementDays);
    final UniqueIdentifier uid = _mapper.add(bundle, convention);
    convention.setUniqueId(uid);
    return uid;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6a205_ef881/rev_6a205-ef881;/projects/OG-Financial/src/com/opengamma/financial/convention/InMemoryConventionBundleMaster;addConventionBundle(IdentifierBundle,String,DayCount,BusinessDayConvention,Frequency,Integer,Identifier,DayCount,BusinessDayConvention,Frequency,Integer,Identifier,Identifier);    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, swapFixedLegDayCount, swapFixedLegBusinessDayConvention, swapFixedLegFrequency, swapFixedLegSettlementDays,
        swapFixedLegRegion, swapFloatingLegDayCount, swapFloatingLegBusinessDayConvention, swapFloatingLegFrequency, swapFloatingLegSettlementDays, swapFloatingLegInitialRate, swapFloatingLegRegion);
    return add(bundle, convention);;    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, swapFixedLegDayCount, swapFixedLegBusinessDayConvention, swapFixedLegFrequency, swapFixedLegSettlementDays,
        swapFixedLegRegion, swapFloatingLegDayCount, swapFloatingLegBusinessDayConvention, swapFloatingLegFrequency, swapFloatingLegSettlementDays, swapFloatingLegInitialRate, swapFloatingLegRegion);
    final UniqueIdentifier uid = _mapper.add(bundle, convention);
    convention.setUniqueId(uid);
    return uid;;    final ConventionBundleImpl convention = new ConventionBundleImpl(bundle, name, swapFixedLegDayCount,
        swapFixedLegBusinessDayConvention, swapFixedLegFrequency, swapFixedLegSettlementDays,
        swapFixedLegRegion, swapFloatingLegDayCount, swapFloatingLegBusinessDayConvention, swapFloatingLegFrequency,
        swapFloatingLegSettlementDays, swapFloatingLegInitialRate, swapFloatingLegRegion);
    final UniqueIdentifier uid = _mapper.add(bundle, convention);
    convention.setUniqueId(uid);
    return uid;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6a205_ef881/rev_6a205-ef881;/projects/OG-Financial/src/com/opengamma/financial/convention/InMemoryConventionBundleMaster;addConventionBundle(IdentifierBundle,String,boolean,boolean,int,int,boolean);    final ConventionBundleImpl convention = new ConventionBundleImpl(name, isEOMConvention, calculateScheduleFromMaturity, exDividendDays, settlementDays, rollToSettlement);
    return add(bundle, convention);;    final ConventionBundleImpl convention = new ConventionBundleImpl(name, isEOMConvention, calculateScheduleFromMaturity, exDividendDays, settlementDays, rollToSettlement);
    final UniqueIdentifier uid = _mapper.add(bundle, convention);
    convention.setUniqueId(uid);
    return uid;;    final ConventionBundleImpl convention = new ConventionBundleImpl(name, isEOMConvention,
        calculateScheduleFromMaturity, exDividendDays, settlementDays, rollToSettlement);
    final UniqueIdentifier uid = _mapper.add(bundle, convention);
    convention.setUniqueId(uid);
    return uid;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6b100_ecf80/rev_6b100-ecf80;/projects/OG-MasterDB/src/test/java/com/opengamma/masterdb/batch/ViewClientTest;testListenerNotifications();      newHashSet(
        new ComputedValueResult(
          new ValueSpecification(
            "Value2",
                    ComputationTargetSpecification.of(UniqueId.of("Scheme", "PrimitiveValue")),
            ValueProperties.with("Function", newHashSet("MarketDataSourcingFunction")).get()),
          (byte) 2, AggregatedExecutionLog.EMPTY),
        new ComputedValueResult(
          new ValueSpecification(
            "Value1",
                    ComputationTargetSpecification.of(UniqueId.of("Scheme", "PrimitiveValue")),
            ValueProperties.with("Function", newHashSet("MarketDataSourcingFunction")).get()),
          (byte) 1, AggregatedExecutionLog.EMPTY)
      ),
      fullFragment.getValue().getAllMarketData());;      newHashSet(
        new ComputedValueResult(
          new ValueSpecification(
            "Value2",
            new ComputationTargetSpecification(
              ComputationTargetType.PRIMITIVE,
              UniqueId.of("Scheme", "PrimitiveValue")),
            ValueProperties.with("Function", newHashSet("MarketDataSourcingFunction")).get()),
          (byte) 2, AggregatedExecutionLog.EMPTY),
        new ComputedValueResult(
          new ValueSpecification(
            "Value1",
            new ComputationTargetSpecification(
              ComputationTargetType.PRIMITIVE,
              UniqueId.of("Scheme", "PrimitiveValue")),
            ValueProperties.with("Function", newHashSet("MarketDataSourcingFunction")).get()),
          (byte) 1, AggregatedExecutionLog.EMPTY)
      ),
      fullFragment.getValue().getAllMarketData());;        newHashSet(
            new ComputedValueResult(
                new ValueSpecification(
                    "Value2",
                    new ComputationTargetSpecification(
                        ComputationTargetType.PRIMITIVE,
                        UniqueId.of("Scheme", "PrimitiveValue")),
                    ValueProperties.with("Function", newHashSet("MarketDataSourcingFunction")).get()),
                (byte) 2, AggregatedExecutionLog.EMPTY),
            new ComputedValueResult(
                new ValueSpecification(
                    "Value1",
                    new ComputationTargetSpecification(
                        ComputationTargetType.PRIMITIVE,
                        UniqueId.of("Scheme", "PrimitiveValue")),
                    ValueProperties.with("Function", newHashSet("MarketDataSourcingFunction")).get()),
                (byte) 1, AggregatedExecutionLog.EMPTY)
        ),
        fullFragment.getValue().getAllMarketData());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6ba5a_3c588/rev_6ba5a-3c588;/projects/OG-Financial/src/com/opengamma/financial/analytics/fixedincome/FixedIncomeConverterDataProvider;getIndexTimeSeries(InterestRateInstrumentType,SwapLeg,ZonedDateTime,ZonedDateTime,HistoricalTimeSeriesSource);      final IdentifierBundle id;
      //if (!indexID.getScheme().equals(SecurityUtils.BLOOMBERG_TICKER)) {
      ConventionBundle indexConvention = _conventionSource.getConventionBundle(floatingLeg.getFloatingReferenceRateIdentifier());
      if (indexConvention == null) {
        //TODO remove this immediately
        indexConvention = _conventionSource.getConventionBundle(Identifier.of(SecurityUtils.BLOOMBERG_TICKER, indexID.getValue()));
      }
      id = indexConvention.getIdentifiers();
      //indexID = indexConvention.getIdentifiers().getIdentifier(SecurityUtils.BLOOMBERG_TICKER);
      
      //final IdentifierBundle id = indexID.toBundle();;      if (!indexID.getScheme().equals(SecurityUtils.BLOOMBERG_TICKER)) {
        ConventionBundle indexConvention = _conventionSource.getConventionBundle(floatingLeg.getFloatingReferenceRateIdentifier());
        if (indexConvention == null) {
          //TODO remove this immediately
          indexConvention = _conventionSource.getConventionBundle(Identifier.of(SecurityUtils.BLOOMBERG_TICKER, indexID.getValue()));
        }
        indexID = indexConvention.getIdentifiers().getIdentifier(SecurityUtils.BLOOMBERG_TICKER);
      } 

      final IdentifierBundle id = indexID.toBundle();;      if (!indexID.getScheme().equals(SecurityUtils.BLOOMBERG_TICKER)) {
        ConventionBundle indexConvention = _conventionSource.getConventionBundle(floatingLeg.getFloatingReferenceRateIdentifier());
        if (indexConvention == null) {
          //TODO remove this immediately
          indexConvention = _conventionSource.getConventionBundle(Identifier.of(SecurityUtils.BLOOMBERG_TICKER, indexID.getValue()));
        }
        indexID = indexConvention.getIdentifiers().getIdentifier(SecurityUtils.BLOOMBERG_TICKER);
      }

      final IdentifierBundle id = indexID.toBundle();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6ba5a_3c588/rev_6ba5a-3c588;/projects/OG-Financial/src/com/opengamma/financial/analytics/fixedincome/FixedIncomeConverterDataProvider;getIndexTimeSeries(InterestRateInstrumentType,SwapLeg,ZonedDateTime,ZonedDateTime,HistoricalTimeSeriesSource);          .getHistoricalTimeSeries(_fieldName, id, null, null, startDate, true, now.toLocalDate(), true);
      if (ts == null) {        
        throw new OpenGammaRuntimeException("Could not get time series of underlying index " + indexID.toString() + " bundle used was " + id);;          .getHistoricalTimeSeries(id, _dataSourceName, _dataProvider, _fieldName, startDate, true, now.toLocalDate(), true);
      if (ts == null) {        
        throw new OpenGammaRuntimeException("Could not get time series of underlying index " + indexID.toString());;          .getHistoricalTimeSeries(id, _dataSourceName, _dataProvider, _fieldName, startDate, true, now.toLocalDate(), true);
      if (ts == null) {
        throw new OpenGammaRuntimeException("Could not get time series of underlying index " + indexID.toString());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_6be70_ef50e/rev_6be70-ef50e;/src/java/org/apache/cassandra/net/IncomingTcpConnection;run();            Gossiper.instance.setVersion(from, version);
            logger.debug("set version for {} to {}", from, version);
            ;            else if (msg != null)
            {
                Gossiper.instance.setVersion(from, version);
                logger.debug("set version for {} to {}", from, version);
            }
            ;            else if (msg != null)
            {
                Gossiper.instance.setVersion(from, version);
                logger.debug("set version for {} to {}", from, version);
            }
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6cd83_9dd28/rev_6cd83-9dd28;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/MarketInstrumentImpliedYieldCurveFunction;compile(FunctionCompilationContext,InstantProvider);    Triple<InstantProvider, InstantProvider, InterpolatedYieldCurveSpecification> fundingCompile = _fundingHelper.compile(context, atInstant);
    ;    Triple<InstantProvider, InstantProvider, InterpolatedYieldCurveSpecification> fundingCompile = _forwardHelper.compile(context, atInstant);
    ;    Triple<InstantProvider, InstantProvider, InterpolatedYieldCurveSpecification> fundingCompile = _forwardHelper.compile(context, atInstant);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_7e1a1_bbb86/rev_7e1a1-bbb86;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;securePool();        JedisPoolConfig config = new JedisPoolConfig();
        config.setTestOnBorrow(true);
        JedisPool pool = new JedisPool(config, hnp.getHost(), hnp.getPort(), 
        		2000, "foobared");
        Jedis jedis = pool.getResource();
        jedis.set("foo", "bar");
        pool.returnResource(jedis);
        pool.destroy();;        JedisPoolConfig config = new JedisPoolConfig();
        config.setTestOnBorrow(true);
        JedisPool pool = new JedisPool(config, hnp.host, hnp.port, 2000, "foobared");
        Jedis jedis = pool.getResource();
        jedis.set("foo", "bar");
        pool.returnResource(jedis);
        pool.destroy();;	JedisPoolConfig config = new JedisPoolConfig();
	config.setTestOnBorrow(true);
	JedisPool pool = new JedisPool(config, hnp.host, hnp.port, 2000,
		"foobared");
	Jedis jedis = pool.getResource();
	jedis.set("foo", "bar");
	pool.returnResource(jedis);
	pool.destroy();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_7e1a1_bbb86/rev_7e1a1-bbb86;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;selectDatabaseOnActivation();	public void selectDatabaseOnActivation() {
		JedisPool pool = new JedisPool(new JedisPoolConfig(), hnp.getHost(), 
				hnp.getPort(), 2000, "foobared");;	public void selectDatabaseOnActivation() {
		JedisPool pool = new JedisPool(new JedisPoolConfig(), hnp.host, hnp.port, 2000, "foobared");;    public void selectDatabaseOnActivation() {
	JedisPool pool = new JedisPool(new JedisPoolConfig(), hnp.host,
		hnp.port, 2000, "foobared");
/home/ines/gjcc/fpfnanalysis/samplerpl/java_openrefine/revisions/rev_8fb45_c91a3/rev_8fb45-c91a3;/extensions/freebase/src/com/google/refine/freebase/model/recon/KeyBasedReconConfig;batchRecon(List<ReconJob>,long);            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
                jsonWriter.array();
                jsonWriter.object();
                
                    jsonWriter.key("id"); jsonWriter.value(null);
                    jsonWriter.key("name"); jsonWriter.value(null);
                    jsonWriter.key("guid"); jsonWriter.value(null);
                    jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                    
                    jsonWriter.key("key");
                        jsonWriter.array();
                        jsonWriter.object();
                        
                        jsonWriter.key("namespace");
                            jsonWriter.object();
                            jsonWriter.key("id"); jsonWriter.value(namespace.id);
                            jsonWriter.endObject();
                            
                        jsonWriter.key("value"); jsonWriter.value(null);
                        jsonWriter.key("value|=");
                            jsonWriter.array();
                            for (ReconJob job : jobs) {
                                jsonWriter.value(((KeyBasedReconJob) job).key);
                            }
                            jsonWriter.endArray();
                            
                        jsonWriter.endObject();
                        jsonWriter.endArray();
                    
                jsonWriter.endObject();
                jsonWriter.endArray();
                
                query = stringWriter.toString();
            };            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
                    jsonWriter.array();
                    jsonWriter.object();
                    
                        jsonWriter.key("id"); jsonWriter.value(null);
                        jsonWriter.key("name"); jsonWriter.value(null);
                        jsonWriter.key("guid"); jsonWriter.value(null);
                        jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                        
                        jsonWriter.key("key");
                            jsonWriter.array();
                            jsonWriter.object();
                            
                            jsonWriter.key("namespace");
                                jsonWriter.object();
                                jsonWriter.key("id"); jsonWriter.value(namespace.id);
                                jsonWriter.endObject();
                                
                            jsonWriter.key("value"); jsonWriter.value(null);
                            jsonWriter.key("value|=");
                                jsonWriter.array();
                                for (ReconJob job : jobs) {
                                    jsonWriter.value(((KeyBasedReconJob) job).key);
                                }
                                jsonWriter.endArray();
                                
                            jsonWriter.endObject();
                            jsonWriter.endArray();
                        
                    jsonWriter.endObject();
                    jsonWriter.endArray();
                
                query = stringWriter.toString();
            };            String query = buildQuery(jobs);
            String s = FreebaseUtils.mqlread(query);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_8fef6_319a2/rev_8fef6-319a2;/src/main/java/redis/clients/jedis/Jedis;blpop(String);public List<String> blpop(String... args) {
	client.blpop(args);
	client.setTimeoutInfinite();
	final List<String> multiBulkReply = client.getMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<String> blpop(String... args) {
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<String> blpop(String arg) {
        String[] args = new String[1];
        args[0] = arg;
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_8fef6_319a2/rev_8fef6-319a2;/src/main/java/redis/clients/jedis/Jedis;brpop(String);public List<String> brpop(String... args) {
	client.brpop(args);
	client.setTimeoutInfinite();
	final List<String> multiBulkReply = client.getMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<String> brpop(String... args) {
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<String> brpop(String arg) {
        String[] args = new String[1];
        args[0] = arg;
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_09d59_acbf8/rev_09d59-acbf8;/projects/OG-Financial/src/com/opengamma/financial/OpenGammaCompilationContextFactoryBean;configureCompilationContext(FunctionCompilationContext);    OpenGammaCompilationContext.setInterpolatedYieldCurveDefinitionSource(context, _interpolatedYieldCurveDefinitionSource);
    OpenGammaCompilationContext.setInterpolatedYieldCurveSpecificationBuilder(context, _interpolatedYieldCurveSpecificationBuilder);
    OpenGammaCompilationContext.setVolatilityCubeDefinitionSource(context, _volatilityCubeDefinitionSource);;    OpenGammaCompilationContext.setInterpolatedYieldCurveDefinitionSource(context, _interpolatedYieldCurveDefinitionSource);
    OpenGammaCompilationContext.setInterpolatedYieldCurveSpecificationBuilder(context, _interpolatedYieldCurveSpecificationBuilder);;    OpenGammaCompilationContext.setInterpolatedYieldCurveDefinitionSource(context,
        _interpolatedYieldCurveDefinitionSource);
    OpenGammaCompilationContext.setInterpolatedYieldCurveSpecificationBuilder(context,
        _interpolatedYieldCurveSpecificationBuilder);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_9d7fb_c44af/rev_9d7fb-c44af;/test/unit/org/apache/cassandra/db/HintedHandOffTest;testCompactionOfHintsCF();@Test
    public void testCompactionOfHintsCF() throws Exception
    {
        // prepare hints column family
        Table systemTable = Table.open("system");
        ColumnFamilyStore hintStore = systemTable.getColumnFamilyStore(HintedHandOffManager.HINTS_CF);
        hintStore.clearUnsafe();
        hintStore.metadata.gcGraceSeconds(36000); // 10 hours
        hintStore.setCompactionStrategyClass(SizeTieredCompactionStrategy.class.getCanonicalName());
        hintStore.disableAutoCompaction();

        // insert 1 hint
        RowMutation rm = new RowMutation(TABLE4, ByteBufferUtil.bytes(1));
        rm.add(new QueryPath(STANDARD1_CF,
                             null,
                             ByteBufferUtil.bytes(String.valueOf(COLUMN1))),
               ByteBufferUtil.EMPTY_BYTE_BUFFER,
               System.currentTimeMillis());

        RowMutation.hintFor(rm, ByteBufferUtil.bytes("foo")).apply();

        // flush data to disk
        hintStore.forceBlockingFlush();
        assertEquals(1, hintStore.getSSTables().size());

        // submit compaction
        FBUtilities.waitOnFuture(HintedHandOffManager.instance.compact());
        while (CompactionManager.instance.getPendingTasks() > 0 || CompactionManager.instance.getActiveCompactions() > 0)
            TimeUnit.SECONDS.sleep(1);

        // single row should not be removed because of gc_grace_seconds
        // is 10 hours and there are no any tombstones in sstable
        assertEquals(1, hintStore.getSSTables().size());;@Test
    public void testCompactionOfHintsCF() throws Exception
    {
        // prepare hints column family
        Table systemTable = Table.open("system");
        ColumnFamilyStore hintStore = systemTable.getColumnFamilyStore(HintedHandOffManager.HINTS_CF);
        hintStore.clearUnsafe();
        hintStore.metadata.gcGraceSeconds(36000); // 10 hours
        hintStore.setCompactionStrategyClass(SizeTieredCompactionStrategy.class.getCanonicalName());
        hintStore.disableAutoCompaction();

        // insert 1 hint
        RowMutation rm = new RowMutation(TABLE4, ByteBufferUtil.bytes(1));
        rm.add(new QueryPath(STANDARD1_CF,
                             null,
                             ByteBufferUtil.bytes(String.valueOf(COLUMN1))),
               ByteBufferUtil.EMPTY_BYTE_BUFFER,
               System.currentTimeMillis());

        RowMutation.hintFor(rm, ByteBufferUtil.bytes("foo")).apply();

        // flush data to disk
        hintStore.forceBlockingFlush();
        assertEquals(1, hintStore.getSSTables().size());

        // submit compaction
        FBUtilities.waitOnFuture(HintedHandOffManager.instance.compact());
        while (CompactionManager.instance.getPendingTasks() > 0 || CompactionManager.instance.getActiveCompactions() > 0)
            TimeUnit.SECONDS.sleep(1);

        // single row should not be removed because of gc_grace_seconds
        // is 10 hours and there are no any tombstones in sstable
        assertEquals(1, hintStore.getSSTables().size());;@Test
    public void testCompactionOfHintsCF() throws Exception
    {
        // prepare hints column family
        Table systemTable = Table.open("system");
        ColumnFamilyStore hintStore = systemTable.getColumnFamilyStore(SystemTable.HINTS_CF);
        hintStore.clearUnsafe();
        hintStore.metadata.gcGraceSeconds(36000); // 10 hours
        hintStore.setCompactionStrategyClass(SizeTieredCompactionStrategy.class.getCanonicalName());
        hintStore.disableAutoCompaction();

        // insert 1 hint
        RowMutation rm = new RowMutation(TABLE4, ByteBufferUtil.bytes(1));
        rm.add(new QueryPath(STANDARD1_CF,
                             null,
                             ByteBufferUtil.bytes(String.valueOf(COLUMN1))),
               ByteBufferUtil.EMPTY_BYTE_BUFFER,
               System.currentTimeMillis());

        RowMutation.hintFor(rm, UUID.randomUUID()).apply();

        // flush data to disk
        hintStore.forceBlockingFlush();
        assertEquals(1, hintStore.getSSTables().size());

        // submit compaction
        FBUtilities.waitOnFuture(HintedHandOffManager.instance.compact());
        while (CompactionManager.instance.getPendingTasks() > 0 || CompactionManager.instance.getActiveCompactions() > 0)
            TimeUnit.SECONDS.sleep(1);

        // single row should not be removed because of gc_grace_seconds
        // is 10 hours and there are no any tombstones in sstable
        assertEquals(1, hintStore.getSSTables().size());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_11d41_d58ad/rev_11d41-d58ad;/projects/OG-Analytics/src/com/opengamma/math/rootfinding/newton/NewtonVectorRootFinder;bisectBacktrack(DoubleMatrix1D,Function1D<DoubleMatrix1D,DoubleMatrix1D>,DataBundle);      if (data.getLambda0() == 0.0) {
        throw new MathException("Failed to converge");
      }
    } while (Double.isNaN(data.getG1()) || Double.isInfinite(data.getG1()) || Double.isNaN(data.getG2()) || Double.isInfinite(data.getG2()));;    } while (Double.isNaN(data.getG1()) || Double.isInfinite(data.getG1()) || Double.isNaN(data.getG2()) || Double.isInfinite(data.getG2()));;    } while (Double.isNaN(data.getG1()) || Double.isInfinite(data.getG1()) || Double.isNaN(data.getG2())
        || Double.isInfinite(data.getG2()));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_16c7c_9b0c5/rev_16c7c-9b0c5;/projects/OG-Financial/src/com/opengamma/financial/analytics/volatility/cube/VolatilityCubeMarketDataFunction;init(FunctionCompilationContext);    
    final ComputationTargetSpecification currencySpec = new ComputationTargetSpecification(_helper.getCurrency());
    ;    
    final ComputationTargetSpecification currencySpec = new ComputationTargetSpecification(_helper.getKey().getCurrency());
    ;
    final ComputationTargetSpecification currencySpec = new ComputationTargetSpecification(_helper.getKey().getCurrency());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_23e2e_f1d8f/rev_23e2e-f1d8f;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/YieldCurveDefinition;propertySet(String,Object,boolean);        throw new UnsupportedOperationException("Property cannot be written: regionId");
      case 3373707:  // name;        throw new UnsupportedOperationException("Property cannot be written: region");
      case 3373707:  // name;        throw new UnsupportedOperationException("Property cannot be written: region");
      case 3373707: // name
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_29f54_2b51a/rev_29f54-2b51a;/solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent;toSolrDoc(SolrInputDocument,IndexSchema);      if (f.fieldType().stored() ) {
        out.add(f);;      if (f.fieldType().stored()) {
        out.add(f);;      if (f.fieldType().stored()) {
        out.add((StorableField) f);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_gradle/revisions/rev_38d61_ca1bb/rev_38d61-ca1bb;/subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration;DefaultConfiguration(String,String,ConfigurationsProvider,ConfigurationResolver,ListenerManager,DependencyMetaDataProvider,ResolutionStrategyInternal);        ownArtifacts.beforeChange(new VetoContainerChangeAction());;        ownArtifacts.beforeChange(new VetoContainerChangeAction());;        ownArtifacts.beforeChange(veto);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d;/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PlotCornerResetButtonManager;resetY();void resetY() {
		if (plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			resetNonTimeAxis();
		} else {
			resetTimeAxis();
		};void resetY() {
		if (plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			resetNonTimeAxis();
		} else {
			resetTimeAxis();
		};void resetY() {
		if (plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME) {
			resetNonTimeAxis();
		} else {
			resetTimeAxis();
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d;/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PlotCornerResetButtonManager;updateButtons();public void updateButtons() {
		Axis timeAxis = plot.plotAbstraction.getTimeAxis();
		Axis nonTimeAxis = plot.getNonTimeAxis();
		Axis xAxis;
		Axis yAxis;
		if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			xAxis = timeAxis;
			yAxis = nonTimeAxis;
		} else {
			xAxis = nonTimeAxis;
			yAxis = timeAxis;
		}

		List<AbstractPlottingPackage> plots = plot.plotAbstraction.getSubPlots();
		// Only show the top right reset button on the top plot.
		if(plots.get(0) == plot) {
			// This was changed to fix MCT-2613: [Plot] Top right corner button appears briefly in jump and scrunch modes, between the time that the plot line hits the end of the time axis and when the jump
			// The problem was that the jump occurs based on the maximum time plotted, which due to compression, is not the same as the current MCT time.
			// As an easy fix, the button is always hidden when the time axis is not pinned.
			// Assuming that data should never appear off the right of a jump plot, this works well enough.
			// If that assumption breaks, the code should be modified to check against the maximum plotted time instead of the current MCT time.
			long now = plot.plotAbstraction.getCurrentMCTTime();
			if(!timeAxis.isPinned()) {
				plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
			} else if(plot.getCurrentTimeAxisMaxAsLong() < now || plot.getCurrentTimeAxisMinAsLong() > now) {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(true);
			} else {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(false);
			}
		} else {
			plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
		}
		// Only show the time axis reset button on the bottom plot.
		boolean enableX = true;
		boolean enableY = true;
		if(plots.get(plots.size() - 1) != plot) {
			if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
				enableX = false;
			} else {
				enableY = false;
			}
		}

		plot.localControlsManager.setXAxisCornerResetButtonVisible(enableX && !xAxis.isInDefaultState());
		plot.localControlsManager.setYAxisCornerResetButtonVisible(enableY && !yAxis.isInDefaultState());
		plot.localControlsManager.setXAndYAxisCornerResetButtonVisible(!xAxis.isInDefaultState() && !yAxis.isInDefaultState());;public void updateButtons() {
		Axis timeAxis = plot.plotAbstraction.getTimeAxis();
		Axis nonTimeAxis = plot.getNonTimeAxis();
		Axis xAxis;
		Axis yAxis;
		if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			xAxis = timeAxis;
			yAxis = nonTimeAxis;
		} else {
			xAxis = nonTimeAxis;
			yAxis = timeAxis;
		}

		List<AbstractPlottingPackage> plots = plot.plotAbstraction.getSubPlots();
		// Only show the top right reset button on the top plot.
		if(plots.get(0) == plot) {
			// This was changed to fix MCT-2613: [Plot] Top right corner button appears briefly in jump and scrunch modes, between the time that the plot line hits the end of the time axis and when the jump
			// The problem was that the jump occurs based on the maximum time plotted, which due to compression, is not the same as the current MCT time.
			// As an easy fix, the button is always hidden when the time axis is not pinned.
			// Assuming that data should never appear off the right of a jump plot, this works well enough.
			// If that assumption breaks, the code should be modified to check against the maximum plotted time instead of the current MCT time.
			long now = plot.plotAbstraction.getCurrentMCTTime();
			if(!timeAxis.isPinned()) {
				plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
			} else if(plot.getCurrentTimeAxisMaxAsLong() < now || plot.getCurrentTimeAxisMinAsLong() > now) {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(true);
			} else {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(false);
			}
		} else {
			plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
		}
		// Only show the time axis reset button on the bottom plot.
		boolean enableX = true;
		boolean enableY = true;
		if(plots.get(plots.size() - 1) != plot) {
			if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
				enableX = false;
			} else {
				enableY = false;
			}
		}

		plot.localControlsManager.setXAxisCornerResetButtonVisible(enableX && !xAxis.isInDefaultState());
		plot.localControlsManager.setYAxisCornerResetButtonVisible(enableY && !yAxis.isInDefaultState());
		plot.localControlsManager.setXAndYAxisCornerResetButtonVisible(!xAxis.isInDefaultState() && !yAxis.isInDefaultState());;public void updateButtons() {
		Axis timeAxis = plot.plotAbstraction.getTimeAxis();
		Axis nonTimeAxis = plot.getNonTimeAxis();
		Axis xAxis;
		Axis yAxis;
		if(plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME) {
			xAxis = timeAxis;
			yAxis = nonTimeAxis;
		} else {
			xAxis = nonTimeAxis;
			yAxis = timeAxis;
		}

		List<AbstractPlottingPackage> plots = plot.plotAbstraction.getSubPlots();
		// Only show the top right reset button on the top plot.
		if(plots.get(0) == plot) {
			// This was changed to fix MCT-2613: [Plot] Top right corner button appears briefly in jump and scrunch modes, between the time that the plot line hits the end of the time axis and when the jump
			// The problem was that the jump occurs based on the maximum time plotted, which due to compression, is not the same as the current MCT time.
			// As an easy fix, the button is always hidden when the time axis is not pinned.
			// Assuming that data should never appear off the right of a jump plot, this works well enough.
			// If that assumption breaks, the code should be modified to check against the maximum plotted time instead of the current MCT time.
			long now = plot.plotAbstraction.getCurrentMCTTime();
			if(!timeAxis.isPinned()) {
				plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
			} else if(plot.getMaxTime() < now || plot.getMinTime() > now) {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(true);
			} else {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(false);
			}
		} else {
			plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
		}
		// Only show the time axis reset button on the bottom plot.
		boolean enableX = true;
		boolean enableY = true;
		if(plots.get(plots.size() - 1) != plot) {
			if(plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME) {
				enableX = false;
			} else {
				enableY = false;
			}
		}

		plot.localControlsManager.setXAxisCornerResetButtonVisible(enableX && !xAxis.isInDefaultState());
		plot.localControlsManager.setYAxisCornerResetButtonVisible(enableY && !yAxis.isInDefaultState());
		plot.localControlsManager.setXAndYAxisCornerResetButtonVisible(!xAxis.isInDefaultState() && !yAxis.isInDefaultState());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_51a4b_4fb85/rev_51a4b-4fb85;/src/main/java/redis/clients/jedis/Jedis;blpop(String);public List<String> blpop(String... args) {
	client.blpop(args);
	client.setTimeoutInfinite();
	final List<String> multiBulkReply = client.getMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<String> blpop(String... args) {
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<String> blpop(String arg) {
        String[] args = new String[1];
        args[0] = arg;
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_51a4b_4fb85/rev_51a4b-4fb85;/src/main/java/redis/clients/jedis/Jedis;brpop(String);public List<String> brpop(String... args) {
	client.brpop(args);
	client.setTimeoutInfinite();
	final List<String> multiBulkReply = client.getMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<String> brpop(String... args) {
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<String> brpop(String arg) {
        String[] args = new String[1];
        args[0] = arg;
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_51a4b_4fb85/rev_51a4b-4fb85;/src/main/java/redis/clients/jedis/Jedis;getEvalResult();	Object result = client.getOne();

	if (result instanceof byte[])
	    return SafeEncoder.encode((byte[]) result);

	if (result instanceof List<?>) {
	    List<?> list = (List<?>) result;
	    List<String> listResult = new ArrayList<String>(list.size());
	    for (Object bin : list) {
		listResult.add((bin == null ? null : SafeEncoder
			.encode((byte[]) bin)));
	    }

	    return listResult;
	}

	return result;;	Object result = client.getOne();
	
	if (result instanceof byte[])
	    return SafeEncoder.encode((byte[]) result);

	if (result instanceof List<?>) {
	    List<?> list = (List<?>) result;
	    List<String> listResult = new ArrayList<String>(list.size());
	    for (Object bin : list) {
		listResult.add((bin == null ? null : SafeEncoder
			.encode((byte[]) bin)));
	    }

	    return listResult;
	}

	return result;;	return evalResult(client.getOne());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_51a07_22fc2/rev_51a07-22fc2;/src/java/org/apache/cassandra/service/StorageProxy;getRangeSlice(RangeSliceCommand,ConsistencyLevel);                    try;                    // if we're done, great, otherwise, move to the next range
                    try ;                    // if we're done, great, otherwise, move to the next range
                    try
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_51a07_22fc2/rev_51a07-22fc2;/src/java/org/apache/cassandra/service/StorageProxy;getRangeSlice(RangeSliceCommand,ConsistencyLevel);                    }
                    catch (DigestMismatchException e) ;                        rows.addAll(handler.get());
                    } 
                    catch (DigestMismatchException e) ;                        rows.addAll(handler.get());
                    }
                    catch (DigestMismatchException e)
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_56f35_26bcb/rev_56f35-26bcb;/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthorizationException;read(org.apache.thrift.protocol.TProtocol);    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // WHY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.why = iprot.readString();
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();;    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // WHY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.why = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();;    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_74b52_6c686/rev_74b52-6c686;/src/main/java/redis/clients/jedis/JedisClusterConnectionHandler;discoverClusterNodesAndSlots(Jedis);	    ClusterNodeInformation clusterNodeInfo = nodeInfoParser.parse(
		    nodeInfo, new HostAndPort(jedis.getClient().getHost(),
			    jedis.getClient().getPort()));

	    HostAndPort targetNode = clusterNodeInfo.getNode();
	    setNodeIfNotExist(targetNode);
	    assignSlotsToNode(clusterNodeInfo.getAvailableSlots(), targetNode);;	    HostAndPort node = getHostAndPortFromNodeLine(nodeInfo, jedis);
	    setNodeIfNotExist(node);
	    
	    JedisPool nodePool = nodes.get(getNodeKey(node));
	    populateNodeSlots(nodeInfo, nodePool);;	    HostAndPort node = getHostAndPortFromNodeLine(nodeInfo, jedis);
        setNodeIfNotExist(node);

	    JedisPool nodePool = nodes.get(getNodeKey(node));
	    populateNodeSlots(nodeInfo, nodePool);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_74b52_6c686/rev_74b52-6c686;/src/main/java/redis/clients/jedis/JedisClusterConnectionHandler;setNodeIfNotExist(HostAndPort);
	JedisPool nodePool = new JedisPool(node.getHost(), node.getPort());;	
	JedisPool nodePool = new JedisPool(node.getHost(), node.getPort());;	
	JedisPool nodePool = new JedisPool(poolConfig, node.getHost(), node.getPort());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_netty/rev_76c84_4eac8/rev_76c84-4eac8;/transport/src/main/java/io/netty/channel/socket/nio/NioWorker;registerTask(AbstractNioChannel,ChannelFuture);                if (channel instanceof NioSocketChannel) {
                    ((NioSocketChannel) channel).setConnected();
                };                ((NioSocketChannel) channel).setConnected();;
                ((NioSocketChannel) channel).setConnected();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_268bd_64808/rev_268bd-64808;/lucene/src/java/org/apache/lucene/index/IndexWriter;IndexWriter(Directory,IndexWriterConfig);    
    bufferedDeletesStream = new BufferedDeletesStream(messageID);
    bufferedDeletesStream.setInfoStream(infoStream);;    
    bufferedDeletes = new BufferedDeletes(messageID);
    bufferedDeletes.setInfoStream(infoStream);;
    bufferedDeletes = new BufferedDeletes(messageID);
    bufferedDeletes.setInfoStream(infoStream);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_268bd_64808/rev_268bd-64808;/lucene/src/java/org/apache/lucene/index/IndexWriter;addIndexes(IndexReader);                                               fieldInfos.newFieldInfosWithGlobalFieldNumberMap());
      ;                                               ((FieldInfos) docWriter.getFieldInfos().clone()));
      ;                                               ((FieldInfos) docWriter.getFieldInfos().clone()));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_600e6_621fe/rev_600e6-621fe;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/financial/instrument/payment/CouponOISDefinitionTest;toDerivativeFixingOnStartFixed();    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9) }, new double[] {fixingRate, fixingRate, fixingRate });;    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9)}, new double[] {fixingRate, fixingRate, fixingRate});;    final DoubleTimeSeries<ZonedDateTime> fixingTS = ImmutableZonedDateTimeDoubleTimeSeries.ofUTC(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9)}, new double[] {fixingRate, fixingRate, fixingRate});
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_600e6_621fe/rev_600e6-621fe;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/financial/instrument/payment/CouponOISDefinitionTest;toDerivativeFixingMiddleNotYetFixed();    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12) }, new double[] {fixingRate, fixingRate, fixingRate, fixingRate });;    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12)}, new double[] {fixingRate, fixingRate, fixingRate, fixingRate});;    final DoubleTimeSeries<ZonedDateTime> fixingTS = ImmutableZonedDateTimeDoubleTimeSeries.ofUTC(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12)}, new double[] {fixingRate, fixingRate, fixingRate, fixingRate});
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_600e6_621fe/rev_600e6-621fe;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/financial/instrument/payment/CouponOISDefinitionTest;toDerivativeFixingMiddleFixed();    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13) }, new double[] {fixingRate, fixingRate, fixingRate, fixingRate, fixingRate });;    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13)}, new double[] {fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});;    final DoubleTimeSeries<ZonedDateTime> fixingTS = ImmutableZonedDateTimeDoubleTimeSeries.ofUTC(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13)}, new double[] {fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_600e6_621fe/rev_600e6-621fe;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/financial/instrument/payment/CouponOISDefinitionTest;toDerivativeFixingSecondLastFixed();    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15) }, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate });;    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15)}, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});;    final DoubleTimeSeries<ZonedDateTime> fixingTS = ImmutableZonedDateTimeDoubleTimeSeries.ofUTC(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15)}, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_600e6_621fe/rev_600e6-621fe;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/financial/instrument/payment/CouponOISDefinitionTest;toDerivativeFixingLast();    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15) }, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate });;    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15)}, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});;    final DoubleTimeSeries<ZonedDateTime> fixingTS = ImmutableZonedDateTimeDoubleTimeSeries.ofUTC(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15)}, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_600e6_621fe/rev_600e6-621fe;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/financial/instrument/payment/CouponOISDefinitionTest;toDerivativeAfterLast();    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15) }, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate });;    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15)}, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});;    final DoubleTimeSeries<ZonedDateTime> fixingTS = ImmutableZonedDateTimeDoubleTimeSeries.ofUTC(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15)}, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_600e6_621fe/rev_600e6-621fe;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/financial/instrument/payment/CouponOISDefinitionTest;toDerivativeJustAfterPayment();    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15) }, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate });;    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15)}, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});;    final DoubleTimeSeries<ZonedDateTime> fixingTS = ImmutableZonedDateTimeDoubleTimeSeries.ofUTC(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15)}, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_600e6_621fe/rev_600e6-621fe;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/financial/instrument/payment/CouponOISDefinitionTest;toDerivativeAfterPayment();    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15) }, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate });;    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15)}, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});;    final DoubleTimeSeries<ZonedDateTime> fixingTS = ImmutableZonedDateTimeDoubleTimeSeries.ofUTC(new ZonedDateTime[] {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8),
        DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12), DateUtils.getUTCDate(2011, 9, 13), DateUtils.getUTCDate(2011, 9, 14), DateUtils.getUTCDate(2011, 9, 15)}, new double[] {
        fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate, fixingRate});
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_600e6_621fe/rev_600e6-621fe;/projects/OG-Analytics/src/test/java/com/opengamma/analytics/financial/instrument/payment/CouponOISDefinitionTest;toDerivativeUSDFixingOnFirst();    final ZonedDateTime[] fixingZDTs = {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8), DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12) };
    final double[] fixingRates = {0.01, 0.011, 0.012, 0.13 };
    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(fixingZDTs, fixingRates);;    final ZonedDateTime[] fixingZDTs = {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8), DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12)};
    final double[] fixingRates = {0.01, 0.011, 0.012, 0.13};
    final DoubleTimeSeries<ZonedDateTime> fixingTS = new ArrayZonedDateTimeDoubleTimeSeries(fixingZDTs, fixingRates);;    final ZonedDateTime[] fixingZDTs = {DateUtils.getUTCDate(2011, 9, 7), DateUtils.getUTCDate(2011, 9, 8), DateUtils.getUTCDate(2011, 9, 9), DateUtils.getUTCDate(2011, 9, 12)};
    final double[] fixingRates = {0.01, 0.011, 0.012, 0.13};
    final DoubleTimeSeries<ZonedDateTime> fixingTS = ImmutableZonedDateTimeDoubleTimeSeries.ofUTC(fixingZDTs, fixingRates);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_mockito/rev_699c0_79e54/rev_699c0-79e54;/src/org/mockito/internal/configuration/DefaultInjectionEngine;injectMockCandidate(Class<?>,Set<Object>,Object);private void injectMockCandidate(Class<?> awaitingInjectionClazz,
			Set<Object> mocks, Object fieldInstance) {
		for (Field field : awaitingInjectionClazz.getDeclaredFields()) {
			mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)
					.thenInject();
		}
	};private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
        for(Field field : awaitingInjectionClazz.getDeclaredFields()) {
            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
        }
    };private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
            mocks.remove(injected);
        }
    }
/home/ines/gjcc/fpfnanalysis/samplerpl/java_realmjava/revisions/rev_763d4_4c6d8/rev_763d4-4c6d8;/tightdb-java-test/src/test/java/com/tightdb/lib/GroupTest;shouldCreateTablesInGroup();				group.getTable(TestEmployeeTable.class.getSimpleName()).size());;				group.getTable(TestEmployeeTable.class.getCanonicalName()).size());;				group.getTable(TestEmployeeTable.class.getCanonicalName()).size());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_realmjava/revisions/rev_777f4_4cd64/rev_777f4-4cd64;/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest;shouldCreateTablesInGroup();@Test(enabled = true)
	public void shouldCreateTablesInGroup() {
		//util.setDebugLevel(2);
		Group group = new Group();

		TestEmployeeTable employees = new TestEmployeeTable(group);
		employees.add(NAME0, "Doe", 10000, true, new byte[] { 1, 2, 3 },
				new Date(), "extra", null);
		employees.add(NAME2, "B. Good", 20000, true, new byte[] { 1, 2, 3 },
				new Date(), true, null);
		employees.insert(1, NAME1, "Mihajlovski", 30000, false, new byte[] { 4,
				5 }, new Date(), 1234, null);

		byte[] data = group.writeToMem();
		
		// check table info retrieval
		assertEquals(1, group.size());
		assertEquals(TestEmployeeTable.class.getSimpleName(),
				group.getTableName(0));
		assertTrue(group.hasTable(TestEmployeeTable.class.getSimpleName()));
		assertFalse(group.hasTable("xxxxxx"));

		// check table retrieval
		assertEquals(employees.size(),
				group.getTable(TestEmployeeTable.class.getSimpleName()).size());
		employees.clear();
		group.close();

		// Make new group based on same data.
		Group group2 = new Group(data);
		TestEmployeeTable employees2 = new TestEmployeeTable(group2);
		assertEquals(3, employees2.size());
		assertEquals(NAME0, employees2.get(0).getFirstName());
		assertEquals(NAME1, employees2.get(1).getFirstName());
		assertEquals(NAME2, employees2.get(2).getFirstName());
		employees2.clear();
		group2.close();

		// Make new empty group
		Group group3 = new Group();
		TestEmployeeTable employees3 = new TestEmployeeTable(group3);
		assertEquals(0, employees3.size());
		employees3.clear();
		group3.close();

	};@Test(enabled = true)
	public void shouldCreateTablesInGroup() {
		//util.setDebugLevel(2);
		Group group = new Group();

		TestEmployeeTable employees = new TestEmployeeTable(group);
		employees.add(NAME0, "Doe", 10000, true, new byte[] { 1, 2, 3 },
				new Date(), "extra", null);
		employees.add(NAME2, "B. Good", 20000, true, new byte[] { 1, 2, 3 },
				new Date(), true, null);
		employees.insert(1, NAME1, "Mihajlovski", 30000, false, new byte[] { 4,
				5 }, new Date(), 1234, null);

		byte[] data = group.writeToMem();
		
		// check table info retrieval
		assertEquals(1, group.size());
		assertEquals(TestEmployeeTable.class.getSimpleName(),
				group.getTableName(0));
		assertTrue(group.hasTable(TestEmployeeTable.class.getSimpleName()));
		assertFalse(group.hasTable("xxxxxx"));

		// check table retrieval
		assertEquals(employees.size(),
				group.getTable(TestEmployeeTable.class.getSimpleName()).size());
		employees.clear();
		group.close();

		// Make new group based on same data.
		Group group2 = new Group(data);
		TestEmployeeTable employees2 = new TestEmployeeTable(group2);
		assertEquals(3, employees2.size());
		assertEquals(NAME0, employees2.at(0).getFirstName());
		assertEquals(NAME1, employees2.at(1).getFirstName());
		assertEquals(NAME2, employees2.at(2).getFirstName());
		employees2.clear();
		group2.close();

		// Make new empty group
		Group group3 = new Group();
		TestEmployeeTable employees3 = new TestEmployeeTable(group3);
		assertEquals(0, employees3.size());
		employees3.clear();
		group3.close();

	};@Test(enabled = true)
    public void shouldCreateTablesInGroup() {
        //util.setDebugLevel(2);
        Group group = new Group();

        TestEmployeeTable employees = new TestEmployeeTable(group);
        employees.add(NAME0, "Doe", 10000, true, new byte[] { 1, 2, 3 },
                new Date(), "extra", null);
        employees.add(NAME2, "B. Good", 20000, true, new byte[] { 1, 2, 3 },
                new Date(), true, null);
        employees.insert(1, NAME1, "Mihajlovski", 30000, false, new byte[] { 4,
                5 }, new Date(), 1234, null);

        byte[] data = group.writeToMem();

        // check table info retrieval
        assertEquals(1, group.size());
        assertEquals(TestEmployeeTable.class.getSimpleName(),
                group.getTableName(0));
        assertTrue(group.hasTable(TestEmployeeTable.class.getSimpleName()));
        assertFalse(group.hasTable("xxxxxx"));

        // check table retrieval
        assertEquals(employees.size(),
                group.getTable(TestEmployeeTable.class.getSimpleName()).size());
        employees.clear();
        group.close();

        // Make new group based on same data.
        Group group2 = new Group(data);
        TestEmployeeTable employees2 = new TestEmployeeTable(group2);
        assertEquals(3, employees2.size());
        assertEquals(NAME0, employees2.at(0).getFirstName());
        assertEquals(NAME1, employees2.at(1).getFirstName());
        assertEquals(NAME2, employees2.at(2).getFirstName());
        employees2.clear();
        group2.close();

        // Make new empty group
        Group group3 = new Group();
        TestEmployeeTable employees3 = new TestEmployeeTable(group3);
        assertEquals(0, employees3.size());
        employees3.clear();
        group3.close();

    }
/home/ines/gjcc/fpfnanalysis/samplerpl/java_realmjava/revisions/rev_777f4_4cd64/rev_777f4-4cd64;/examples/intro-example/src/com/tightdb/examples/tutorial/tutorial;main(String[]);    String name2 = peopleTable.get(2).name.get();
    ;    String name2 = peopleTable.at(2).name.get();
    ;    String name2 = peopleTable.at(2).name.get();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_realmjava/revisions/rev_777f4_4cd64/rev_777f4-4cd64;/examples/intro-example/src/com/tightdb/examples/tutorial/tutorial;main(String[]);    
    System.out.println("get(2).getName -> " + name + " or " + name2);
    System.out.println("get(2).setName('NewName') -> " + peopleTable.get(2).getName());
    
    // @@Example: last_row @@   ;    
    System.out.println("at(2).getName -> " + name + " or " + name2);
    System.out.println("at(2).setName('NewName') -> " + peopleTable.at(2).getName());
    
    // @@Example: last_row @@   ;
    System.out.println("at(2).getName -> " + name + " or " + name2);
    System.out.println("at(2).setName('NewName') -> " + peopleTable.at(2).getName());

    // @@Example: last_row @@
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_935e7_b4673/rev_935e7-b4673;/src/java/voldemort/client/protocol/admin/ProtoBuffAdminClientRequestFormat;fetchPartitionEntries(int,String,List<Integer>,VoldemortFilter);                    // There is a bug in CodedInputStream
                    // Work around suggested by ijuma
                    byte[] input = new byte[size];
                    ByteUtils.read(inputStream, input);
                    VAdminProto.FetchPartitionEntriesResponse.Builder response = VAdminProto.FetchPartitionEntriesResponse.newBuilder();
                    response.mergeFrom(input);;                    // There is a bug in CodedInputStream
                    // Work around suggested by ijuma
                    byte[] input = new byte[size];
                    ByteUtils.read(inputStream, input);
                    VAdminProto.FetchPartitionEntriesResponse.Builder response =
                            VAdminProto.FetchPartitionEntriesResponse.newBuilder();
                    response.mergeFrom(input);;                    VAdminProto.FetchPartitionEntriesResponse response =
                            responseFromStream(inputStream, size);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_02074_3a9d5/rev_02074-3a9d5;/projects/OG-Financial/src/com/opengamma/financial/analytics/conversion/SwapSecurityConverter;getTenor(Frequency);      throw new OpenGammaRuntimeException(
          "Can only handle annual, semi-annual, quarterly and monthly frequencies for floating swap legs, not " + freq.getConventionName());;      throw new OpenGammaRuntimeException(
          "Can only handle annual, semi-annual, quarterly and monthly frequencies for floating swap legs");;      throw new OpenGammaRuntimeException("Can only handle annual, semi-annual, quarterly and monthly frequencies for floating swap legs");
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6679d_b7cb2/rev_6679d-b7cb2;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/FixedIncomeStripIdentifierAndMaturityBuilder;getCash(InterpolatedYieldCurveSpecification,FixedIncomeStripWithIdentifier,Map<Identifier,Double>);private CashSecurity getCash(InterpolatedYieldCurveSpecification spec, FixedIncomeStripWithIdentifier strip, Map<Identifier, Double> marketValues) {
//    CashSecurity sec = new CashSecurity(spec.getCurrency(), RegionUtils.countryRegionId("US"), 
//                                        new DateTimeWithZone(spec.getCurveDate().plus(strip.getMaturity().getPeriod()).atTime(11, 00)));
    CashSecurity sec = new CashSecurity(spec.getCurrency(), spec.getRegion(), 
        spec.getCurveDate().plus(strip.getMaturity().getPeriod()).atTime(11, 00).atZone(TimeZone.UTC), marketValues.get(strip.getSecurity()), 1.0d);;private CashSecurity getCash(InterpolatedYieldCurveSpecification spec, FixedIncomeStripWithIdentifier strip, Map<Identifier, Double> marketValues) {
//    CashSecurity sec = new CashSecurity(spec.getCurrency(), RegionUtils.countryRegionId("US"), 
//                                        new DateTimeWithZone(spec.getCurveDate().plus(strip.getMaturity().getPeriod()).atTime(11, 00)));
    CashSecurity sec = new CashSecurity(spec.getCurrency(), spec.getRegion(), 
        new DateTimeWithZone(spec.getCurveDate().plus(strip.getMaturity().getPeriod()).atTime(11, 00)), marketValues.get(strip.getSecurity()), 1.0d);;private CashSecurity getCash(InterpolatedYieldCurveSpecification spec, FixedIncomeStripWithIdentifier strip,
      Map<Identifier, Double> marketValues) {
    //    CashSecurity sec = new CashSecurity(spec.getCurrency(), RegionUtils.countryRegionId("US"), 
    //                                        new DateTimeWithZone(spec.getCurveDate().plus(strip.getMaturity().getPeriod()).atTime(11, 00)));
    CashSecurity sec = new CashSecurity(spec.getCurrency(), spec.getRegion(),
        new DateTimeWithZone(spec.getCurveDate().plus(strip.getMaturity().getPeriod()).atTime(11, 00)),
        marketValues.get(strip.getSecurity()), 1.0d);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6679d_b7cb2/rev_6679d-b7cb2;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/FixedIncomeStripIdentifierAndMaturityBuilder;getFRA(InterpolatedYieldCurveSpecification,FixedIncomeStripWithIdentifier,Map<Identifier,Double>);//    return new FRASecurity(spec.getCurrency(), RegionUtils.countryRegionId("US"), 
//                           new DateTimeWithZone(startDate.atTime(11, 00)), new DateTimeWithZone(endDate.atTime(11, 00)));
    return new FRASecurity(spec.getCurrency(), spec.getRegion(), 
        startDate.atTime(11, 00).atZone(TimeZone.UTC), endDate.atTime(11, 00).atZone(TimeZone.UTC), marketValues.get(strip.getSecurity()), 1.0d);;//    return new FRASecurity(spec.getCurrency(), RegionUtils.countryRegionId("US"), 
//                           new DateTimeWithZone(startDate.atTime(11, 00)), new DateTimeWithZone(endDate.atTime(11, 00)));
    return new FRASecurity(spec.getCurrency(), spec.getRegion(), 
        new DateTimeWithZone(startDate.atTime(11, 00)), new DateTimeWithZone(endDate.atTime(11, 00)), marketValues.get(strip.getSecurity()), 1.0d);;    //    return new FRASecurity(spec.getCurrency(), RegionUtils.countryRegionId("US"), 
    //                           new DateTimeWithZone(startDate.atTime(11, 00)), new DateTimeWithZone(endDate.atTime(11, 00)));
    return new FRASecurity(spec.getCurrency(), spec.getRegion(),
        new DateTimeWithZone(startDate.atTime(11, 00)), new DateTimeWithZone(endDate.atTime(11, 00)),
        marketValues.get(strip.getSecurity()), 1.0d);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6679d_b7cb2/rev_6679d-b7cb2;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/FixedIncomeStripIdentifierAndMaturityBuilder;getSwap(InterpolatedYieldCurveSpecification,FixedIncomeStripWithIdentifier,Map<Identifier,Double>);    ZonedDateTime tradeDate = curveDate.atTime(11, 00).atZone(TimeZone.UTC);
    ZonedDateTime effectiveDate = DateUtil.previousWeekDay(curveDate.plusDays(3)).atTime(11, 00).atZone(TimeZone.UTC);
    ZonedDateTime maturityDate = curveDate.plus(strip.getMaturity().getPeriod()).atTime(11, 00).atZone(TimeZone.UTC);
    ConventionBundle convention = _conventionBundleSource.getConventionBundle(Identifier.of(InMemoryConventionBundleMaster.SIMPLE_NAME_SCHEME, spec.getCurrency().getCode() + "_SWAP"));;    DateTimeWithZone tradeDate = new DateTimeWithZone(curveDate.atTime(11, 00).atZone(TimeZone.UTC));
    DateTimeWithZone effectiveDate = new DateTimeWithZone(DateUtil.previousWeekDay(curveDate.plusDays(3)).atTime(11, 00).atZone(TimeZone.UTC));
    DateTimeWithZone maturityDate = new DateTimeWithZone(curveDate.plus(strip.getMaturity().getPeriod()).atTime(11, 00).atZone(TimeZone.UTC));
    ConventionBundle convention = _conventionBundleSource.getConventionBundle(Identifier.of(InMemoryConventionBundleMaster.SIMPLE_NAME_SCHEME, spec.getCurrency().getCode() + "_SWAP"));;    DateTimeWithZone tradeDate = new DateTimeWithZone(curveDate.atTime(11, 00).atZone(TimeZone.UTC));
    DateTimeWithZone effectiveDate = new DateTimeWithZone(DateUtil.previousWeekDay(curveDate.plusDays(3))
        .atTime(11, 00).atZone(TimeZone.UTC));
    DateTimeWithZone maturityDate = new DateTimeWithZone(curveDate.plus(strip.getMaturity().getPeriod()).atTime(11, 00)
        .atZone(TimeZone.UTC));
    ConventionBundle convention = _conventionBundleSource.getConventionBundle(Identifier.of(
        InMemoryConventionBundleMaster.SIMPLE_NAME_SCHEME, spec.getCurrency().getCode() + "_SWAP"));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6679d_b7cb2/rev_6679d-b7cb2;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/FixedIncomeStripIdentifierAndMaturityBuilder;getTenorSwap(InterpolatedYieldCurveSpecification,FixedIncomeStripWithIdentifier,Map<Identifier,Double>);    ZonedDateTime tradeDate = curveDate.atTime(11, 00).atZone(TimeZone.UTC);
    ZonedDateTime effectiveDate = DateUtil.previousWeekDay(curveDate.plusDays(3)).atTime(11, 00).atZone(TimeZone.UTC);
    ZonedDateTime maturityDate = curveDate.plus(strip.getMaturity().getPeriod()).atTime(11, 00).atZone(TimeZone.UTC);
    ConventionBundle convention = _conventionBundleSource.getConventionBundle(Identifier.of(InMemoryConventionBundleMaster.SIMPLE_NAME_SCHEME, spec.getCurrency().getCode() + "_TENOR_SWAP"));;    DateTimeWithZone tradeDate = new DateTimeWithZone(curveDate.atTime(11, 00).atZone(TimeZone.UTC));
    DateTimeWithZone effectiveDate = new DateTimeWithZone(DateUtil.previousWeekDay(curveDate.plusDays(3)).atTime(11, 00).atZone(TimeZone.UTC));
    DateTimeWithZone maturityDate = new DateTimeWithZone(curveDate.plus(strip.getMaturity().getPeriod()).atTime(11, 00).atZone(TimeZone.UTC));
    ConventionBundle convention = _conventionBundleSource.getConventionBundle(Identifier.of(InMemoryConventionBundleMaster.SIMPLE_NAME_SCHEME, spec.getCurrency().getCode() + "_TENOR_SWAP"));;    DateTimeWithZone tradeDate = new DateTimeWithZone(curveDate.atTime(11, 00).atZone(TimeZone.UTC));
    DateTimeWithZone effectiveDate = new DateTimeWithZone(DateUtil.previousWeekDay(curveDate.plusDays(3))
        .atTime(11, 00).atZone(TimeZone.UTC));
    DateTimeWithZone maturityDate = new DateTimeWithZone(curveDate.plus(strip.getMaturity().getPeriod()).atTime(11, 00)
        .atZone(TimeZone.UTC));
    ConventionBundle convention = _conventionBundleSource.getConventionBundle(Identifier.of(
        InMemoryConventionBundleMaster.SIMPLE_NAME_SCHEME, spec.getCurrency().getCode() + "_TENOR_SWAP"));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_6679d_b7cb2/rev_6679d-b7cb2;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/MarketInstrumentImpliedYieldCurveFunction;execute(FunctionExecutionContext,FunctionInputs,ComputationTarget,Set<ValueRequirement>);        if (strip.getInstrumentType() == StripInstrumentType.SWAP) {
          //derivative = financialSecurity.accept(instrumentAdapter).toDerivative(localNow, _fundingCurveDefinitionName,
          //    _forwardCurveDefinitionName);
          derivative = swapConverter.getSwap((SwapSecurity) strip.getSecurity(), _fundingCurveDefinitionName,
              _forwardCurveDefinitionName, marketValue / 100., 0.0, now);
        } else if (strip.getInstrumentType() == StripInstrumentType.CASH) {          
          derivative = financialSecurity.accept(instrumentAdapter).toDerivative(now, _forwardCurveDefinitionName);
        } else if (strip.getInstrumentType() == StripInstrumentType.FRA) {
          derivative = financialSecurity.accept(instrumentAdapter).toDerivative(now, _fundingCurveDefinitionName,
              _forwardCurveDefinitionName);
        } else if (strip.getInstrumentType() == StripInstrumentType.FUTURE) {
          derivative = financialSecurity.accept(futureAdapter).toDerivative(now, marketValue,
              _forwardCurveDefinitionName);
        } else if (strip.getInstrumentType() == StripInstrumentType.LIBOR) {
          derivative = financialSecurity.accept(instrumentAdapter).toDerivative(now, _forwardCurveDefinitionName);
        } else if (strip.getInstrumentType() == StripInstrumentType.TENOR_SWAP) {
          derivative = tenorSwapConverter.getSwap((SwapSecurity) strip.getSecurity(), _fundingCurveDefinitionName,
              _fundingCurveDefinitionName, _forwardCurveDefinitionName, marketValue / 10000., now);;        if (strip.getInstrumentType() == StripInstrumentType.SWAP) {
          //derivative = financialSecurity.accept(instrumentAdapter).toDerivative(localNow, _fundingCurveDefinitionName,
          //    _forwardCurveDefinitionName);
          derivative = swapConverter.getSwap((SwapSecurity) strip.getSecurity(), _fundingCurveDefinitionName,
              _forwardCurveDefinitionName, marketValue / 100., 0.0, now);
        } else if (strip.getInstrumentType() == StripInstrumentType.CASH) {
          derivative = financialSecurity.accept(instrumentAdapter).toDerivative(now, _forwardCurveDefinitionName);
        } else if (strip.getInstrumentType() == StripInstrumentType.FRA) {
          derivative = financialSecurity.accept(instrumentAdapter).toDerivative(now, _fundingCurveDefinitionName,
              _forwardCurveDefinitionName);
        } else if (strip.getInstrumentType() == StripInstrumentType.FUTURE) {
          derivative = financialSecurity.accept(futureAdapter).toDerivative(now, marketValue,
              _forwardCurveDefinitionName);
        } else if (strip.getInstrumentType() == StripInstrumentType.LIBOR) {
          derivative = financialSecurity.accept(instrumentAdapter).toDerivative(now, _forwardCurveDefinitionName);
        } else if (strip.getInstrumentType() == StripInstrumentType.TENOR_SWAP) {
          derivative = tenorSwapConverter.getSwap((SwapSecurity) strip.getSecurity(), _fundingCurveDefinitionName,
              _fundingCurveDefinitionName, _forwardCurveDefinitionName, marketValue / 10000., now);;        String[] curveNames = FixedIncomeInstrumentCurveExposureHelper.getCurveNamesForForwardCurveInstrument(strip
            .getInstrumentType(), _fundingCurveDefinitionName, _forwardCurveDefinitionName);
        if (strip.getInstrumentType() == StripInstrumentType.FUTURE) {
          derivative = financialSecurity.accept(_futureAdapter).toDerivative(now, marketValue, curveNames);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_7817d_852ba/rev_7817d-852ba;/esc/src/main/java/org/cloudifysource/esc/installer/AgentlessInstaller;remoteExecuteAgentOnServer(InstallationDetails,long,String);				.exportVar(NO_WEB_SERVICES_ENV, details.isNoWebServices() ? "true" : "false")
				.exportVar(MACHINE_IP_ADDRESS_ENV,
						details.isBindToPrivateIp() ? details.getPrivateIp() : details.getPublicIp());				.exportVar(NO_WEB_SERVICES_ENV,
						details.isNoWebServices() ? "true" : "false")
				.exportVar(
						MACHINE_IP_ADDRESS_ENV,
						details.isBindToPrivateIp() ? details.getPrivateIp()
								: details.getPublicIp());				.exportVar(CloudifyConstants.SPRING_BEANS_PROFILE_ENV_VAR, "nonsecure")
				.exportVar(NO_WEB_SERVICES_ENV,
						details.isNoWebServices() ? "true" : "false")
				.exportVar(
						MACHINE_IP_ADDRESS_ENV,
						details.isBindToPrivateIp() ? details.getPrivateIp()
								: details.getPublicIp())
/home/ines/gjcc/fpfnanalysis/samplerpl/java_lucenesolr/revisions/rev_8476d_7702d/rev_8476d-7702d;/lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread;processDocument();    ArrayUtil.quickSort(fields, 0, fieldCount, fieldsComp);;    quickSort(fields, 0, fieldCount-1);;    quickSort(fields, 0, fieldCount-1);
   
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_19324_500de/rev_19324-500de;/tests/unit/com/opengamma/financial/security/db/HibernateSecurityMasterTest;testEquityOptionSecurityBeans();    Assert.assertEquals (americanUnderlyingIdentifier, american.getUnderlyingSecurity());
    Assert.assertEquals (dollar, american.getCurrency ());;    Assert.assertEquals (americanUnderlyingIdentifier, american.getUnderlyingIdentityKey());
    Assert.assertEquals (dollar, american.getCurrency ());;    Assert.assertEquals (americanUnderlyingIdentifier, american.getUnderlyingIdentityKey());
    Assert.assertEquals (dollar, american.getCurrency ());    
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_61567_9bb34/rev_61567-9bb34;/src/java/org/apache/cassandra/config/CFMetaData;toSchemaNoColumns(RowMutation,long);        Integer oldId = Schema.instance.convertNewCfId(cfId);
        if (oldId != null) // keep old ids (see CASSANDRA-3794 for details)
            cf.addColumn(Column.create(oldId, timestamp, cfName, "id"));;        Integer oldId = Schema.instance.convertNewCfId(cfId);

        if (oldId != null) // keep old ids (see CASSANDRA-3794 for details)
            cf.addColumn(Column.create(oldId, timestamp, cfName, "id"));;        cf.addColumn(Column.create(cfType.toString(), timestamp, cfName, "type"));

        if (isSuper())
        {
            // We need to continue saving the comparator and subcomparator separatly, otherwise
            // we won't know at deserialization if the subcomparator should be taken into account
            // TODO: we should implement an on-start migration if we want to get rid of that.
            CompositeType ct = (CompositeType)comparator;
            cf.addColumn(Column.create(ct.types.get(0).toString(), timestamp, cfName, "comparator"));
            cf.addColumn(Column.create(ct.types.get(1).toString(), timestamp, cfName, "subcomparator"));
        }
        else
        {
            cf.addColumn(Column.create(comparator.toString(), timestamp, cfName, "comparator"));
        }
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_70431_1a706/rev_70431-1a706;/src/com/opengamma/engine/view/calcnode/AbstractCalculationNode;executeJob(CalculationJob);    ;    
    List<CalculationJobItem> itemsToExecute = job.getResultWriter().getItemsToExecute(this, job);
    
    s_logger.info("Executing {} items", itemsToExecute.size());
    ;
    List<CalculationJobItem> itemsToExecute = job.getResultWriter().getItemsToExecute(this, job);

    s_logger.info("Executing {} items", itemsToExecute.size());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_70431_1a706/rev_70431-1a706;/src/com/opengamma/engine/view/calcnode/AbstractCalculationNode;executeJob(CalculationJob);    
    for (CalculationJobItem jobItem : job.getJobItems()) {
      ;    
    for (CalculationJobItem jobItem : itemsToExecute) {
      ;
    for (CalculationJobItem jobItem : itemsToExecute) {
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_70431_1a706/rev_70431-1a706;/src/com/opengamma/engine/view/calcnode/AbstractCalculationNode;executeJob(CalculationJob);        
        resultItem = new CalculationJobResultItem(jobItem);
      ;        
        resultItem = new CalculationJobResultItem(jobItem, InvocationResult.SUCCESS);
        resultItem.setResults(result);
      ;
        resultItem = new CalculationJobResultItem(jobItem, InvocationResult.SUCCESS);
        resultItem.setResults(result);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_70431_1a706/rev_70431-1a706;/src/com/opengamma/engine/view/calcnode/AbstractCalculationNode;executeJob(CalculationJob);        resultItem = new CalculationJobResultItem(jobItem, e);
      ;        resultItem = new CalculationJobResultItem(jobItem, InvocationResult.ERROR);
        resultItem.setException(e);
      ;        resultItem = new CalculationJobResultItem(jobItem, InvocationResult.ERROR);
        resultItem.setException(e);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_70431_1a706/rev_70431-1a706;/src/com/opengamma/engine/view/calcnode/AbstractCalculationNode;executeJob(CalculationJob);    CalculationJobResult jobResult = new CalculationJobResult(spec, 
        durationNanos, 
        resultItems,
        getNodeId());
    ;    CalculationJobResult jobResult = new CalculationJobResult(spec, durationNanos, resultItems);
    ;    CalculationJobResult jobResult = new CalculationJobResult(spec, durationNanos, resultItems);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_kotlin/revisions/rev_77320_9b2e2/rev_77320-9b2e2;/js/js.tests/test/org/jetbrains/k2js/test/rhino/RhinoUtils;runFileWithRhino(String,Context,Scriptable);                                         @NotNull Context context,
                                         @NotNull Scriptable scope) throws Exception {
        context.evaluateString(scope, fileToString(inputFile), inputFile, 1, null);;                                         @NotNull Context context,
                                         @NotNull Scriptable scope) throws Exception {
        FileReader reader = new FileReader(inputFile);
        try {
            context.evaluateReader(scope, reader, inputFile, 1, null);
        } finally {
            reader.close();
        };            @NotNull Context context,
            @NotNull Scriptable scope) throws Exception {
        FileReader reader = new FileReader(inputFile);
        try {
            context.evaluateReader(scope, reader, inputFile, 1, null);
        }
        finally {
            reader.close();
        }
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_84549_e2fce/rev_84549-e2fce;/projects/OG-Financial/src/main/java/com/opengamma/financial/aggregation/SeniorityAggregationFunction;classifyPosition(Position);  public String classifyPosition(final Position position) {

    final Security security = resolveSecurity(position);;  public String classifyPosition(Position position) {

    Security security = resolveSecurity(position);;  public String classifyPosition(Position position) {
    Security security = resolveSecurity(position);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_84549_e2fce/rev_84549-e2fce;/projects/OG-Financial/src/main/java/com/opengamma/financial/aggregation/SeniorityAggregationFunction;resolveSecurity(Position);private Security resolveSecurity(final Position position) {

    final Security security = position.getSecurityLink().getTarget();;private Security resolveSecurity(Position position) {

    Security security = position.getSecurityLink().getTarget();;private Security resolveSecurity(Position position) {
    Security security = position.getSecurityLink().getTarget();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_84549_e2fce/rev_84549-e2fce;/projects/OG-Financial/src/main/java/com/opengamma/financial/aggregation/EntityNameAggregationFunction;classifyPosition(Position);  public String classifyPosition(final Position position) {

    final Security security = resolveSecurity(position);;  public String classifyPosition(Position position) {

    Security security = resolveSecurity(position);;  public String classifyPosition(Position position) {
    Security security = resolveSecurity(position);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_84549_e2fce/rev_84549-e2fce;/projects/OG-Financial/src/main/java/com/opengamma/financial/aggregation/EntityNameAggregationFunction;resolveSecurity(Position);private Security resolveSecurity(final Position position) {

    final Security security = position.getSecurityLink().getTarget();;private Security resolveSecurity(Position position) {

    Security security = position.getSecurityLink().getTarget();;private Security resolveSecurity(Position position) {
    Security security = position.getSecurityLink().getTarget();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_91419_11405/rev_91419-11405;/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/ElasticMachineProvisioningCloudifyAdapter;getExternalApi(String);    public Object getExternalApi(final String apiName) throws InterruptedException,
            ElasticMachineProvisioningException {
        Object externalApi = null;
        // TODO: (adaml) extract the names of the apis to constants.
        if (apiName.equals(CloudifyConstants.STORAGE_REMOTE_API_KEY)) {
            externalApi = new RemoteStorageProvisioningDriverAdapter(storageProvisioning, cloud.getCloudStorage().
                    getTemplates().get(storageTemplateName));
        } else if (apiName.equals(CloudifyConstants.NETWORK_REMOTE_API_KEY)) {
            externalApi = new RemoteNetworkProvisioningDriverAdapter(this.networkProvisioning);
        };	public Object getExternalApi(final String apiName) throws InterruptedException,
			ElasticMachineProvisioningException {
		Object externalApi = null;
		// TODO: (adaml) extract the names of the apis to constants.
		if (apiName.equals(CloudifyConstants.STORAGE_REMOTE_API_KEY)) {
			externalApi = new RemoteStorageProvisioningDriverAdapter(storageProvisioning, cloud.getCloudStorage().
					getTemplates().get(storageTemplateName));
		} else if (apiName.equals(CloudifyConstants.NETWORK_REMOTE_API_KEY)) {
			externalApi = new RemoteNetworkProvisioningDriverAdapter(this.networkProvisioning);
		};	public Object getExternalApi(final String apiName) throws InterruptedException,
			ElasticMachineProvisioningException {
		Object externalApi = null;
		if (apiName.equals(CloudifyConstants.STORAGE_REMOTE_API_KEY)) {
			externalApi = new RemoteStorageProvisioningDriverAdapter(storageProvisioning, cloud.getCloudStorage().
					getTemplates().get(storageTemplateName));
		} else if (apiName.equals(CloudifyConstants.NETWORK_REMOTE_API_KEY)) {
			externalApi = new RemoteNetworkProvisioningDriverAdapter(this.networkProvisioning);
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_a0e20_2c25d/rev_a0e20-2c25d;/contrib/ec2-testing/test/voldemort/utils/Ec2RebalancingTest;insertNode(int[][],int);          int templateLength = template.length;
          int vectorTailLength = template[templateLength-1].length - pivot;;        int templateLength = template.length;
        int vectorTailLength = template[templateLength-1].length - pivot;
        
        int[][] layout = new int[templateLength+1][];
        layout[templateLength-1] = new int[pivot];
        layout[templateLength] = new int[vectorTailLength];;        int templateLength = template.length;
        int vectorTailLength = template[templateLength - 1].length - pivot;

        int[][] layout = new int[templateLength + 1][];
        layout[templateLength - 1] = new int[pivot];
        layout[templateLength] = new int[vectorTailLength];
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_a0e20_2c25d/rev_a0e20-2c25d;/contrib/ec2-testing/test/voldemort/utils/Ec2RebalancingTest;splitLastPartition(int[][],int);          int templateLength = template.length;
          int vectorTailLength = template[templateLength-2].length - pivot;;        int templateLength = template.length;
        int vectorTailLength = template[templateLength-2].length - pivot;;        int templateLength = template.length;
        int vectorTailLength = template[templateLength - 2].length - pivot;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_a0e20_2c25d/rev_a0e20-2c25d;/contrib/ec2-testing/test/voldemort/utils/Ec2RebalancingTest;splitLastPartition(int[][],int);          int[][] layout = new int[templateLength][];
          layout[templateLength-2] = new int[pivot];
          layout[templateLength-1] = new int[vectorTailLength];;        int[][] layout = new int[templateLength][];
        layout[templateLength-2] = new int[pivot];
        layout[templateLength-1] = new int[vectorTailLength];;        int[][] layout = new int[templateLength][];
        layout[templateLength - 2] = new int[pivot];
        layout[templateLength - 1] = new int[vectorTailLength];
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_a0e20_2c25d/rev_a0e20-2c25d;/contrib/ec2-testing/test/voldemort/utils/Ec2RebalancingTest;getPorts(int);private static int[] getPorts(int count) {
          int[] ports = new int[count*3];
          for (int i = 0; i < count; i++) {
              ports[3 * i] = 6665;
              ports[3 * i + 1] = 6666;
              ports[3 * i + 2] = 6667;
          };private int[] getPorts(int count) {
        int[] ports = new int[count*3];
        for (int i = 0; i < count; i++) {
            ports[3 * i] = 6665;
            ports[3 * i + 1] = 6666;
            ports[3 * i + 2] = 6667;
        };private int[] getPorts(int count) {
        int[] ports = new int[count * 3];
        for(int i = 0; i < count; i++) {
            ports[3 * i] = 6665;
            ports[3 * i + 1] = 6666;
            ports[3 * i + 2] = 6667;
        }
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_a0e20_2c25d/rev_a0e20-2c25d;/contrib/ec2-testing/test/voldemort/utils/Ec2RebalancingTest;setUp();        if (logger.isInfoEnabled());        testEntries = ServerTestUtils.createRandomKeyValueString(ec2RebalancingTestConfig.numKeys);
        originalCluster = updateCluster(originalCluster, nodeIds);

        if (logger.isInfoEnabled());        testEntries = ServerTestUtils.createRandomKeyValueString(ec2RebalancingTestConfig.numKeys);
        originalCluster = updateCluster(originalCluster, nodeIds);

        if(logger.isInfoEnabled())
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_a0e20_2c25d/rev_a0e20-2c25d;/contrib/ec2-testing/test/voldemort/utils/Ec2RebalancingTest;testSingleRebalancing();        if (spareNode)
            targetLayout = splitLastPartition(partitionMap, partitionMap[clusterSize-2].length-2);
        else
            targetLayout = insertNode(partitionMap, partitionMap[clusterSize-1].length-2);;        if (spareNode)
            targetLayout = splitLastPartition(partitionMap, partitionMap[clusterSize-2].length-2);
        else 
            targetLayout = insertNode(partitionMap, partitionMap[clusterSize-1].length-2);;        if(spareNode)
            targetLayout = splitLastPartition(partitionMap,
                                              partitionMap[clusterSize - 2].length - 2);
        else
            targetLayout = insertNode(partitionMap, partitionMap[clusterSize - 1].length - 2);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_a3d12_2f7c7/rev_a3d12-2f7c7;/src/java/org/apache/cassandra/service/StorageProxy;mutate(List<RowMutation>,ConsistencyLevel);        long startTime = System.nanoTime();
        List<IWriteResponseHandler> responseHandlers = new ArrayList<IWriteResponseHandler>();

        RowMutation mostRecentRowMutation = null;
        StorageService ss = StorageService.instance;
        String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getLocalAddress());
        
        try
        {
            for (RowMutation rm : mutations)
            {
                mostRecentRowMutation = rm;
                String table = rm.getTable();
                AbstractReplicationStrategy rs = Table.open(table).getReplicationStrategy();

                List<InetAddress> naturalEndpoints = ss.getNaturalEndpoints(table, rm.key());
                Collection<InetAddress> writeEndpoints = ss.getTokenMetadata().getWriteEndpoints(StorageService.getPartitioner().getToken(rm.key()), table, naturalEndpoints);
                Multimap<InetAddress, InetAddress> hintedEndpoints = rs.getHintedEndpoints(writeEndpoints);
                
                final IWriteResponseHandler responseHandler = rs.getWriteResponseHandler(writeEndpoints, hintedEndpoints, consistency_level);
                
                // exit early if we can't fulfill the CL at this time
                responseHandler.assureSufficientLiveNodes();
                
                responseHandlers.add(responseHandler);
                
                // Multimap that holds onto all the messages and addresses meant for a specific datacenter
                Map<String, Multimap<Message, InetAddress>> dcMessages = new HashMap<String, Multimap<Message, InetAddress>>(hintedEndpoints.size());
                Message unhintedMessage = null;

                for (Map.Entry<InetAddress, Collection<InetAddress>> entry : hintedEndpoints.asMap().entrySet())
                {
                    InetAddress destination = entry.getKey();
                    Collection<InetAddress> targets = entry.getValue();

                    String dc = DatabaseDescriptor.getEndpointSnitch().getDatacenter(destination);

                    if (targets.size() == 1 && targets.iterator().next().equals(destination))
                    {
                        // unhinted writes
                        if (destination.equals(FBUtilities.getLocalAddress()))
                        {
                            insertLocalMessage(rm, responseHandler);
                        }
                        else
                        {
                            // belongs on a different server
                            if (unhintedMessage == null)
                            {
                                unhintedMessage = rm.makeRowMutationMessage();
                                MessagingService.instance().addCallback(responseHandler, unhintedMessage.getMessageId());
                            }
                            if (logger.isDebugEnabled())
                                logger.debug("insert writing key " + ByteBufferUtil.bytesToHex(rm.key()) + " to " + unhintedMessage.getMessageId() + "@" + destination);
                            
                            
                            Multimap<Message, InetAddress> messages = dcMessages.get(dc);
                            if (messages == null)
                            {
                               messages = HashMultimap.create();
                               dcMessages.put(dc, messages);
                            }
                            
                            messages.put(unhintedMessage, destination);
                        }
                    }
                    else
                    {
                        // hinted
                        Message hintedMessage = rm.makeRowMutationMessage();
                        for (InetAddress target : targets)
                        {
                            if (!target.equals(destination))
                            {
                                addHintHeader(hintedMessage, target);
                                if (logger.isDebugEnabled())
                                    logger.debug("insert writing key " + ByteBufferUtil.bytesToHex(rm.key()) + " to " + hintedMessage.getMessageId() + "@" + destination + " for " + target);
                            }
                        }
                        responseHandler.addHintCallback(hintedMessage, destination);

                        Multimap<Message, InetAddress> messages = dcMessages.get(dc);
                        
                        if (messages == null)
                        {
                           messages = HashMultimap.create();
                           dcMessages.put(dc, messages);
                        }

                        messages.put(hintedMessage, destination);
                    }
                }

                sendMessages(localDataCenter, dcMessages);
            }
                        
            // wait for writes.  throws timeoutexception if necessary
            for (IWriteResponseHandler responseHandler : responseHandlers)
                responseHandler.get();
        }
        catch (IOException e)
        {
            if (mostRecentRowMutation == null)
                throw new RuntimeException("no mutations were seen but found an error during write anyway", e);
            else
                throw new RuntimeException("error writing key " + ByteBufferUtil.bytesToHex(mostRecentRowMutation.key()), e);
        }
        finally
        {
            writeStats.addNano(System.nanoTime() - startTime);
        };        long startTime = System.nanoTime();
        List<IWriteResponseHandler> responseHandlers = new ArrayList<IWriteResponseHandler>();

        RowMutation mostRecentRowMutation = null;
        StorageService ss = StorageService.instance;
        String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getLocalAddress());
        
        try
        {
            for (RowMutation rm : mutations)
            {
                mostRecentRowMutation = rm;
                String table = rm.getTable();
                AbstractReplicationStrategy rs = Table.open(table).getReplicationStrategy();

                List<InetAddress> naturalEndpoints = ss.getNaturalEndpoints(table, rm.key());
                Collection<InetAddress> writeEndpoints = ss.getTokenMetadata().getWriteEndpoints(StorageService.getPartitioner().getToken(rm.key()), table, naturalEndpoints);
                Multimap<InetAddress, InetAddress> hintedEndpoints = rs.getHintedEndpoints(writeEndpoints);
                
                final IWriteResponseHandler responseHandler = rs.getWriteResponseHandler(writeEndpoints, hintedEndpoints, consistency_level);
                
                // exit early if we can't fulfill the CL at this time
                responseHandler.assureSufficientLiveNodes();
                
                responseHandlers.add(responseHandler);
                
                // Multimap that holds onto all the messages and addresses meant for a specific datacenter
                Map<String, Multimap<Message, InetAddress>> dcMessages = new HashMap<String, Multimap<Message, InetAddress>>(hintedEndpoints.size());
                Message unhintedMessage = null;

                for (Map.Entry<InetAddress, Collection<InetAddress>> entry : hintedEndpoints.asMap().entrySet())
                {
                    InetAddress destination = entry.getKey();
                    Collection<InetAddress> targets = entry.getValue();

                    String dc = DatabaseDescriptor.getEndpointSnitch().getDatacenter(destination);

                    if (targets.size() == 1 && targets.iterator().next().equals(destination))
                    {
                        // unhinted writes
                        if (destination.equals(FBUtilities.getLocalAddress()))
                        {
                            insertLocalMessage(rm, responseHandler);
                        }
                        else
                        {
                            // belongs on a different server
                            if (unhintedMessage == null)
                            {
                                unhintedMessage = rm.makeRowMutationMessage();
                                MessagingService.instance().addCallback(responseHandler, unhintedMessage.getMessageId());
                            }
                            if (logger.isDebugEnabled())
                                logger.debug("insert writing key " + ByteBufferUtil.bytesToHex(rm.key()) + " to " + unhintedMessage.getMessageId() + "@" + destination);
                            
                            
                            Multimap<Message, InetAddress> messages = dcMessages.get(dc);
                            if (messages == null)
                            {
                               messages = HashMultimap.create();
                               dcMessages.put(dc, messages);
                            }
                            
                            messages.put(unhintedMessage, destination);
                        }
                    }
                    else
                    {
                        // hinted
                        Message hintedMessage = rm.makeRowMutationMessage();
                        for (InetAddress target : targets)
                        {
                            if (!target.equals(destination))
                            {
                                addHintHeader(hintedMessage, target);
                                if (logger.isDebugEnabled())
                                    logger.debug("insert writing key " + ByteBufferUtil.bytesToHex(rm.key()) + " to " + hintedMessage.getMessageId() + "@" + destination + " for " + target);
                            }
                        }
                        responseHandler.addHintCallback(hintedMessage, destination);
                        
                        Multimap<Message, InetAddress> messages = dcMessages.get(dc);
                        
                        if (messages == null)
                        {
                           messages = HashMultimap.create();
                           dcMessages.put(dc, messages);
                        }
                        
                        messages.put(hintedMessage, destination);
                    }
                }

                sendMessages(localDataCenter, dcMessages);
            }
                        
            // wait for writes.  throws timeoutexception if necessary
            for (IWriteResponseHandler responseHandler : responseHandlers)
                responseHandler.get();
        }
        catch (IOException e)
        {
            if (mostRecentRowMutation == null)
                throw new RuntimeException("no mutations were seen but found an error during write anyway", e);
            else
                throw new RuntimeException("error writing key " + ByteBufferUtil.bytesToHex(mostRecentRowMutation.key()), e);
        }
        finally
        {
            writeStats.addNano(System.nanoTime() - startTime);
        };        write(mutations, consistency_level, standardWritePerformer, true);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_a84e3_db016/rev_a84e3-db016;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/MarketInstrumentImpliedYieldCurveFunction;execute(FunctionExecutionContext,FunctionInputs,ComputationTarget,Set<ValueRequirement>);      //final SwapSecurityConverter swapConverter = new SwapSecurityConverter(holidaySource, conventionSource,
      //    regionSource);
      final FinancialSecurityVisitorAdapter<FixedIncomeInstrumentConverter<?>> instrumentAdapter = FinancialSecurityVisitorAdapter
          .<FixedIncomeInstrumentConverter<?>>builder().cashSecurityVisitor(
              cashConverter).fraSecurityVisitor(fraConverter).create();
      final FinancialSecurityVisitorAdapter<FixedIncomeFutureInstrumentDefinition<?>> futureAdapter = FinancialSecurityVisitorAdapter
          .<FixedIncomeFutureInstrumentDefinition<?>>builder()
          .futureSecurityVisitor(futureConverter).create();
      final TenorSwapSecurityToTenorSwapConverter tenorSwapConverter = new TenorSwapSecurityToTenorSwapConverter(
          holidaySource, regionSource, conventionSource);
      //final LocalDate localNow = now.toLocalDate();;      //final SwapSecurityConverter swapConverter = new SwapSecurityConverter(holidaySource, conventionSource,
      //    regionSource);
      final FinancialSecurityVisitorAdapter<FixedIncomeInstrumentConverter<?>> instrumentAdapter = FinancialSecurityVisitorAdapter.<FixedIncomeInstrumentConverter<?>>builder().cashSecurityVisitor(
          cashConverter).fraSecurityVisitor(fraConverter).create();
      final FinancialSecurityVisitorAdapter<FixedIncomeFutureInstrumentDefinition<?>> futureAdapter = FinancialSecurityVisitorAdapter.<FixedIncomeFutureInstrumentDefinition<?>>builder()
          .futureSecurityVisitor(futureConverter).create();
      final TenorSwapSecurityToTenorSwapConverter tenorSwapConverter = new TenorSwapSecurityToTenorSwapConverter(
          holidaySource, regionSource, conventionSource);
      //final LocalDate localNow = now.toLocalDate();
      
      
      ;      final SwapSecurityConverter swapConverter = new SwapSecurityConverter(holidaySource, conventionSource,
          regionSource);
      final FinancialSecurityVisitorAdapter<FixedIncomeInstrumentConverter<?>> instrumentAdapter =
          FinancialSecurityVisitorAdapter.<FixedIncomeInstrumentConverter<?>> builder()
              .cashSecurityVisitor(cashConverter)
              .fraSecurityVisitor(fraConverter)
              .swapSecurityVisitor(swapConverter)
              .create();
      final FinancialSecurityVisitorAdapter<FixedIncomeFutureInstrumentDefinition<?>> futureAdapter =
          FinancialSecurityVisitorAdapter.<FixedIncomeFutureInstrumentDefinition<?>> builder()
              .futureSecurityVisitor(futureConverter).create();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_a84e3_db016/rev_a84e3-db016;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/MarketInstrumentImpliedYieldCurveFunction;execute(FunctionExecutionContext,FunctionInputs,ComputationTarget,Set<ValueRequirement>);      final Map<Identifier, Double> fundingMarketDataMap = _fundingHelper.buildMarketDataMap(inputs).getDataPoints();
      final Map<Identifier, Double> forwardMarketDataMap = _forwardHelper.buildMarketDataMap(inputs).getDataPoints();;      Map<Identifier, Double> fundingMarketDataMap = _fundingHelper.buildMarketDataMap(inputs).getDataPoints();
      Map<Identifier, Double> forwardMarketDataMap = _forwardHelper.buildMarketDataMap(inputs).getDataPoints();
      ;      Map<Identifier, Double> fundingMarketDataMap = _fundingHelper.buildMarketDataMap(inputs).getDataPoints();
      Map<Identifier, Double> forwardMarketDataMap = _forwardHelper.buildMarketDataMap(inputs).getDataPoints();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_a84e3_db016/rev_a84e3-db016;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/MarketInstrumentImpliedYieldCurveFunction;execute(FunctionExecutionContext,FunctionInputs,ComputationTarget,Set<ValueRequirement>);        final double marketValue = fundingMarketValue; //TODO is this right;        double marketValue = fundingMarketValue; //TODO is this right
        
        ;        double marketValue = fundingMarketValue; //TODO is this right
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_a84e3_db016/rev_a84e3-db016;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/MarketInstrumentImpliedYieldCurveFunction;execute(FunctionExecutionContext,FunctionInputs,ComputationTarget,Set<ValueRequirement>);        final double marketValue = forwardMarketValue; //TODO is this right;        double marketValue = forwardMarketValue; //TODO is this right
        ;        double marketValue = forwardMarketValue; //TODO is this right
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_ab2f4_53c93/rev_ab2f4-53c93;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;setUp();	public void setUp() throws Exception {
		sentinels.add(sentinel1.toString());;    public void setUp() throws Exception {
	sentinels.add(sentinel1.toString());;    public void setUp() throws Exception {
	sentinels.add(sentinel1.toString());
	sentinels.add(sentinel2.toString());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_ab2f4_53c93/rev_ab2f4-53c93;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;setUp();		sentinelJedis1 = new Jedis(sentinel1.getHost(), sentinel1.getPort());
	};	sentinelJedis1 = new Jedis(sentinel1.getHost(), sentinel1.getPort());
    };	sentinelJedis1 = new Jedis(sentinel1.getHost(), sentinel1.getPort());
	sentinelJedis2 = new Jedis(sentinel2.getHost(), sentinel2.getPort());
    }
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_ab2f4_53c93/rev_ab2f4-53c93;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;ensureSafeTwiceFailover();		forceFailover(pool);
		forceFailover(pool);;	forceFailover(pool);
	forceFailover(pool);;	forceFailover(pool);
	// after failover sentinel needs a bit of time to stabilize before a new failover
	Thread.sleep(100);
	forceFailover(pool);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_ab2f4_53c93/rev_ab2f4-53c93;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;forceFailover(JedisSentinelPool);		// jedis connection should be master
		Jedis jedis = pool.getResource();
		assertEquals("PONG", jedis.ping());;	// jedis connection should be master
	Jedis jedis = pool.getResource();
	assertEquals("PONG", jedis.ping());;	// jedis connection should be master
	Jedis beforeFailoverJedis = pool.getResource();
	assertEquals("PONG", beforeFailoverJedis.ping());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_ab2f4_53c93/rev_ab2f4-53c93;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;waitForFailover(JedisSentinelPool,HostAndPort);			throws InterruptedException {
		HostAndPort newMaster = JedisSentinelTestUtil
				.waitForNewPromotedMaster(sentinelJedis1);;	    throws InterruptedException {
	HostAndPort newMaster = JedisSentinelTestUtil
		.waitForNewPromotedMaster(sentinelJedis1);;	    throws InterruptedException {
	HostAndPort newMaster = JedisSentinelTestUtil
		.waitForNewPromotedMaster(MASTER_NAME, sentinelJedis1, sentinelJedis2);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_ab2f4_53c93/rev_ab2f4-53c93;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;waitForJedisSentinelPoolRecognizeNewMaster(JedisSentinelPool,HostAndPort);		while (true) {
			String host = pool.getCurrentHostMaster().getHost();
			int port = pool.getCurrentHostMaster().getPort();;	while (true) {
	    String host = pool.getCurrentHostMaster().getHost();
	    int port = pool.getCurrentHostMaster().getPort();;	while (true) {
	    HostAndPort currentHostMaster = pool.getCurrentHostMaster();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_ab2f4_53c93/rev_ab2f4-53c93;/src/main/java/redis/clients/jedis/JedisSentinelPool;JedisSentinelPool(String,Set<String>,GenericObjectPoolConfig,int,String,int);			final GenericObjectPoolConfig poolConfig, int timeout,
			final String password, final int database) {
		this.poolConfig = poolConfig;
		this.timeout = timeout;
		this.password = password;
		this.database = database;;	    final GenericObjectPoolConfig poolConfig, int timeout,
	    final String password, final int database) {
	this.poolConfig = poolConfig;
	this.timeout = timeout;
	this.password = password;
	this.database = database;;	    final GenericObjectPoolConfig poolConfig, int timeout,
	    final String password, final int database) {

	this.poolConfig = poolConfig;
	this.timeout = timeout;
	this.password = password;
	this.database = database;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_b28cb_695c5/rev_b28cb-695c5;/projects/OG-Financial/src/com/opengamma/financial/analytics/volatility/cube/fitting/SABRNonLinearLeastSquaresSwaptionCubeFittingFunction;execute(FunctionExecutionContext,FunctionInputs,ComputationTarget,Set<ValueRequirement>);        final Pair<Tenor, Tenor> tenorPair = Pair.of(swapMaturityEntry.getKey(), swaptionExpiryEntry.getKey());
        if (volatilityCubeData.getStrikes() != null && volatilityCubeData.getStrikes().containsKey(tenorPair)) {
          final double forward = volatilityCubeData.getStrikes().get(tenorPair);;        final Pair<Tenor, Tenor> tenorPair = Pair.of(swapMaturityEntry.getKey(), swaptionExpiryEntry.getKey()); 
        if (volatilityCubeData.getStrikes() != null && volatilityCubeData.getStrikes().containsKey(tenorPair)) {
          final double forward = volatilityCubeData.getStrikes().get(tenorPair);;        final Pair<Tenor, Tenor> tenorPair = Pair.of(swapMaturityEntry.getKey(), swaptionExpiryEntry.getKey()); 
        if (volatilityCubeData.getATMStrikes() != null && volatilityCubeData.getATMStrikes().containsKey(tenorPair)) {
          final double forward = volatilityCubeData.getATMStrikes().get(tenorPair);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_b70bb_daa2e/rev_b70bb-daa2e;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/MarketInstrumentImpliedYieldCurveFunction;MarketInstrumentImpliedYieldCurveFunction(String,String,String);public MarketInstrumentImpliedYieldCurveFunction(final String currency, final String fundingCurveDefinitionName, final String forwardCurveDefinitionName) {
    this(Currency.of(currency), fundingCurveDefinitionName, forwardCurveDefinitionName);;public MarketInstrumentImpliedYieldCurveFunction(final String currency, final String fundingCurveDefinitionName, final String forwardCurveDefinitionName) {
    this(CurrencyUnit.of(currency), fundingCurveDefinitionName, forwardCurveDefinitionName);;public MarketInstrumentImpliedYieldCurveFunction(final String currency, final String fundingCurveDefinitionName,
      final String forwardCurveDefinitionName) {
    this(CurrencyUnit.of(currency), fundingCurveDefinitionName, forwardCurveDefinitionName);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_bbcf9_751ba/rev_bbcf9-751ba;/projects/OG-Web/src/com/opengamma/web/json/ViewDefinitionJSONBuilder;toJSON(ViewDefinition);    JSONObject jsonObject = new JSONObject();
    try {
      jsonObject.put(String.valueOf(0), ViewDefinition.class.getName());
      jsonObject.put(NAME_FIELD, viewDefinition.getName());
      if (viewDefinition.getPortfolioOid() != null) {
        jsonObject.put(IDENTIFIER_FIELD, viewDefinition.getPortfolioOid().toString());
      }
      jsonObject.put(USER_FIELD, toJSONObject(viewDefinition.getMarketDataUser()));
      jsonObject.put(RESULT_MODEL_DEFINITION_FIELD, toJSONObject(viewDefinition.getResultModelDefinition()));
      Currency defaultCurrency = viewDefinition.getDefaultCurrency();
      if (defaultCurrency != null) {
        jsonObject.put(CURRENCY_FIELD, defaultCurrency.getCode());
      }
      if (viewDefinition.getMinDeltaCalculationPeriod() != null) {
        jsonObject.put(MIN_DELTA_CALC_PERIOD_FIELD, viewDefinition.getMinDeltaCalculationPeriod());
      }
      if (viewDefinition.getMaxDeltaCalculationPeriod() != null) {
        jsonObject.put(MAX_DELTA_CALC_PERIOD_FIELD, viewDefinition.getMaxDeltaCalculationPeriod());
      }
      if (viewDefinition.getMinFullCalculationPeriod() != null) {
        jsonObject.put(MIN_FULL_CALC_PERIOD_FIELD, viewDefinition.getMinFullCalculationPeriod());
      }
      if (viewDefinition.getMaxFullCalculationPeriod() != null) {
        jsonObject.put(MAX_FULL_CALC_PERIOD_FIELD, viewDefinition.getMaxFullCalculationPeriod());
      }
      Map<String, ViewCalculationConfiguration> calculationConfigurations = viewDefinition.getAllCalculationConfigurationsByName();
      List<JSONObject> calConfigJSONList = Lists.newArrayList();
      for (ViewCalculationConfiguration calcConfig : calculationConfigurations.values()) {
        JSONObject calcConfigJSON = new JSONObject();
        calcConfigJSON.put(NAME_FIELD, calcConfig.getName());
        List<JSONObject> portfolioRequirementsBySecurityType = Lists.newArrayList();
        for (Map.Entry<String, Set<Pair<String, ValueProperties>>> securityTypeRequirements : calcConfig.getPortfolioRequirementsBySecurityType().entrySet()) {
          JSONObject securityTypeRequirementJSON = new JSONObject();
          securityTypeRequirementJSON.put(SECURITY_TYPE_FIELD, securityTypeRequirements.getKey());
          List<JSONObject> portfolioRequirement = Lists.newArrayList();
          for (Pair<String, ValueProperties> requirement : securityTypeRequirements.getValue()) {
            JSONObject reqJSON = new JSONObject();
            reqJSON.put(PORTFOLIO_REQUIREMENT_REQUIRED_OUTPUT_FIELD, requirement.getFirst());
            reqJSON.put(PORTFOLIO_REQUIREMENT_CONSTRAINTS_FIELD, toJSONObject(requirement.getSecond()));
            portfolioRequirement.add(reqJSON);
          }
          if (!portfolioRequirement.isEmpty()) {
            securityTypeRequirementJSON.put(PORTFOLIO_REQUIREMENT_FIELD, portfolioRequirement);
          }
          portfolioRequirementsBySecurityType.add(securityTypeRequirementJSON);
        }
        if (!portfolioRequirementsBySecurityType.isEmpty()) {
          calcConfigJSON.put(PORTFOLIO_REQUIREMENTS_BY_SECURITY_TYPE_FIELD, portfolioRequirementsBySecurityType);
        }
        List<JSONObject> specificRequirementList = Lists.newArrayList();
        for (ValueRequirement specificRequirement : calcConfig.getSpecificRequirements()) {
          specificRequirementList.add(toJSONObject(specificRequirement));
        }
        if (!specificRequirementList.isEmpty()) {
          calcConfigJSON.put(SPECIFIC_REQUIREMENT_FIELD, specificRequirementList);
        }
        calcConfigJSON.put(DELTA_DEFINITION_FIELD, toJSONObject(calcConfig.getDeltaDefinition()));
        calcConfigJSON.put(DEFAULT_PROPERTIES_FIELD, toJSONObject(calcConfig.getDefaultProperties()));
        calcConfigJSON.put(RESOLUTION_RULE_TRANSFORM_FIELD, toJSONObject(calcConfig.getResolutionRuleTransform(), false));
        calConfigJSONList.add(calcConfigJSON);
      }
      if (!calConfigJSONList.isEmpty()) {
        jsonObject.put(CALCULATION_CONFIGURATION_FIELD, calConfigJSONList);
      }
      if (viewDefinition.getUniqueId() != null) {
        jsonObject.put(UNIQUE_ID_FIELD, viewDefinition.getUniqueId().toString());
      }

    } catch (JSONException ex) {
      throw new OpenGammaRuntimeException("unable to convert view definition to JSON", ex);
    }

    return jsonObject.toString();;    JSONObject jsonObject = new JSONObject();
    try {
      jsonObject.put(String.valueOf(0), ViewDefinition.class.getName());
      jsonObject.put(NAME_FIELD, viewDefinition.getName());
      if (viewDefinition.getPortfolioOid() != null) {
        jsonObject.put(IDENTIFIER_FIELD, viewDefinition.getPortfolioOid().toString());
      }
      jsonObject.put(USER_FIELD, toJSONObject(viewDefinition.getMarketDataUser()));
      jsonObject.put(RESULT_MODEL_DEFINITION_FIELD, toJSONObject(viewDefinition.getResultModelDefinition()));
      Currency defaultCurrency = viewDefinition.getDefaultCurrency();
      if (defaultCurrency != null) {
        jsonObject.put(CURRENCY_FIELD, defaultCurrency.getCode());
      }
      if (viewDefinition.getMinDeltaCalculationPeriod() != null) {
        jsonObject.put(MIN_DELTA_CALC_PERIOD_FIELD, viewDefinition.getMinDeltaCalculationPeriod());
      }
      if (viewDefinition.getMaxDeltaCalculationPeriod() != null) {
        jsonObject.put(MAX_DELTA_CALC_PERIOD_FIELD, viewDefinition.getMaxDeltaCalculationPeriod());
      }
      if (viewDefinition.getMinFullCalculationPeriod() != null) {
        jsonObject.put(MIN_FULL_CALC_PERIOD_FIELD, viewDefinition.getMinFullCalculationPeriod());
      }
      if (viewDefinition.getMaxFullCalculationPeriod() != null) {
        jsonObject.put(MAX_FULL_CALC_PERIOD_FIELD, viewDefinition.getMaxFullCalculationPeriod());
      }
      Map<String, ViewCalculationConfiguration> calculationConfigurations = viewDefinition.getAllCalculationConfigurationsByName();
      List<JSONObject> calConfigJSONList = Lists.newArrayList();
      for (ViewCalculationConfiguration calcConfig : calculationConfigurations.values()) {
        JSONObject calcConfigJSON = new JSONObject();
        calcConfigJSON.put(NAME_FIELD, calcConfig.getName());
        List<JSONObject> portfolioRequirementsBySecurityType = Lists.newArrayList();
        for (Map.Entry<String, Set<Pair<String, ValueProperties>>> securityTypeRequirements : calcConfig.getPortfolioRequirementsBySecurityType().entrySet()) {
          JSONObject securityTypeRequirementJSON = new JSONObject();
          securityTypeRequirementJSON.put(SECURITY_TYPE_FIELD, securityTypeRequirements.getKey());
          List<JSONObject> portfolioRequirement = Lists.newArrayList();
          for (Pair<String, ValueProperties> requirement : securityTypeRequirements.getValue()) {
            JSONObject reqJSON = new JSONObject();
            reqJSON.put(PORTFOLIO_REQUIREMENT_REQUIRED_OUTPUT_FIELD, requirement.getFirst());
            reqJSON.put(PORTFOLIO_REQUIREMENT_CONSTRAINTS_FIELD, toJSONObject(requirement.getSecond()));
            portfolioRequirement.add(reqJSON);
          }
          if (!portfolioRequirement.isEmpty()) {
            securityTypeRequirementJSON.put(PORTFOLIO_REQUIREMENT_FIELD, portfolioRequirement);
          }
          portfolioRequirementsBySecurityType.add(securityTypeRequirementJSON);
        }
        if (!portfolioRequirementsBySecurityType.isEmpty()) {
          calcConfigJSON.put(PORTFOLIO_REQUIREMENTS_BY_SECURITY_TYPE_FIELD, portfolioRequirementsBySecurityType);
        }
        List<JSONObject> specificRequirementList = Lists.newArrayList();
        for (ValueRequirement specificRequirement : calcConfig.getSpecificRequirements()) {
          specificRequirementList.add(toJSONObject(specificRequirement));
        }
        if (!specificRequirementList.isEmpty()) {
          calcConfigJSON.put(SPECIFIC_REQUIREMENT_FIELD, specificRequirementList);
        }
        calcConfigJSON.put(DELTA_DEFINITION_FIELD, toJSONObject(calcConfig.getDeltaDefinition()));
        calcConfigJSON.put(DEFAULT_PROPERTIES_FIELD, toJSONObject(calcConfig.getDefaultProperties()));
        calcConfigJSON.put(RESOLUTION_RULE_TRANSFORM_FIELD, toJSONObject(calcConfig.getResolutionRuleTransform(), false));
        calConfigJSONList.add(calcConfigJSON);
      }  
      if (!calConfigJSONList.isEmpty()) {
        jsonObject.put(CALCULATION_CONFIGURATION_FIELD, calConfigJSONList);
      }
      if (viewDefinition.getUniqueId() != null) {
        jsonObject.put(UNIQUE_ID_FIELD, viewDefinition.getUniqueId().toString());
      }
            
    } catch (JSONException ex) {
      throw new OpenGammaRuntimeException("unable to convert view definition to JSON", ex);
    }
    
    return jsonObject.toString();;    return toJSON(viewDefinition, ViewDefinition.class);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_realmjava/revisions/rev_bfdc9_fad6a/rev_bfdc9-fad6a;/tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest;columnIndexOutOfBounds();        try { query.equal(9, true);                       assert(false); } catch(ArrayIndexOutOfBoundsException e) {};        try { query.equal(9, true);                       assert(false); } catch(ArrayIndexOutOfBoundsException e) {};        try { query.equalTo(9, true);                       assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_c2c78_b77c7/rev_c2c78-b77c7;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/CurveDefinitionAndSpecifications;buildStandardCurveDefintions();    forwardDefinitions.put(dkk, buildForwardCurve(dkk, makeShortEnd(false, true, true), null, 0, makeLongEnd(2, 15, new int[] {20, 25, 30, 40, 50 })));
    fundingDefinitions.put(dkk, buildFundingCurve(dkk, makeShortEnd(false, true, true), makeLongEnd(1, 15, new int[] {20, 25, 30 })));
    singleDefinitions.put(dkk, buildSingleCurve(dkk, makeShortEnd(false, true, true), null, 0, makeLongEnd(2, 15, new int[] {20, 25, 30, 40, 50 })));;    forwardDefinitions.put(dkk, buildForwardCurve(dkk, makeShortEnd(false, true, true), null, 0, makeLongEnd(2, 15, new int[] {20, 25, 30, 40, 50 })));
    fundingDefinitions.put(dkk, buildFundingCurve(dkk, makeShortEnd(false, true, true), makeLongEnd(1, 15, new int[] { 20, 25, 30 })));
    singleDefinitions.put(dkk, buildSingleCurve(dkk, makeShortEnd(false, true, true), null, 0, makeLongEnd(2, 15, new int[] {20, 25, 30, 40, 50 })));;    Identifier dkkRegion = RegionUtils.countryRegionId("DK");
    forwardDefinitions.put(dkk, buildForwardCurve(dkk, dkkRegion, makeShortEnd(false, true, true), null, 0, makeLongEnd(2, 15, new int[] {20, 25, 30, 40, 50 })));
    fundingDefinitions.put(dkk, buildFundingCurve(dkk, dkkRegion, makeShortEnd(false, true, true), makeLongEnd(1, 15, new int[] { 20, 25, 30 })));
    singleDefinitions.put(dkk, buildSingleCurve(dkk, dkkRegion, makeShortEnd(false, true, true), null, 0, makeLongEnd(2, 15, new int[] {20, 25, 30, 40, 50 })));
    
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_c2c78_b77c7/rev_c2c78-b77c7;/projects/OG-Financial/src/com/opengamma/financial/analytics/ircurve/CurveDefinitionAndSpecifications;buildStandardCurveDefintions();    forwardDefinitions.put(jpy, buildForwardCurve(jpy, makeShortEnd(false, true, true), Tenor.ofYears(1), 3, makeLongEnd(2, 15, new int[] {20, 25, 30, 35, 40, 50, 60 })));
    fundingDefinitions.put(jpy, buildFundingCurve(jpy, makeShortEnd(false, true, true), makeLongEnd(1, 15, new int[] {20, 25, 30, 35, 40, 50 })));
    singleDefinitions.put(jpy, buildSingleCurve(jpy, makeShortEnd(false, true, true), Tenor.ofYears(1), 3, makeLongEnd(2, 15, new int[] {20, 25, 30, 35, 40, 50, 60 })));;    forwardDefinitions.put(jpy, buildForwardCurve(jpy, makeShortEnd(false, true, true), Tenor.ofYears(1), 3, makeLongEnd(2, 15, new int[] {20, 25, 30, 35, 40, 50, 60 })));
    fundingDefinitions.put(jpy, buildFundingCurve(jpy, makeShortEnd(false, true, true), makeLongEnd(1, 15, new int[] { 20, 25, 30, 35, 40, 50 })));
    singleDefinitions.put(jpy, buildSingleCurve(jpy, makeShortEnd(false, true, true), Tenor.ofYears(1), 3, makeLongEnd(2, 15, new int[] {20, 25, 30, 35, 40, 50, 60 })));;    Identifier jpyRegion = RegionUtils.countryRegionId("JP");
    forwardDefinitions.put(jpy, buildForwardCurve(jpy, jpyRegion, makeShortEnd(false, true, true), Tenor.ofYears(1), 3, makeLongEnd(2, 15, new int[] {20, 25, 30, 35, 40, 50, 60 })));
    fundingDefinitions.put(jpy, buildFundingCurve(jpy, jpyRegion, makeShortEnd(false, true, true), makeLongEnd(1, 15, new int[] { 20, 25, 30, 35, 40, 50 })));
    singleDefinitions.put(jpy, buildSingleCurve(jpy, jpyRegion, makeShortEnd(false, true, true), Tenor.ofYears(1), 3, makeLongEnd(2, 15, new int[] {20, 25, 30, 35, 40, 50, 60 })));
    
/home/ines/gjcc/fpfnanalysis/samplerpl/java_mct/revisions/rev_c07a2_3d41e/rev_c07a2-3d41e;/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/LegendEntry;mouseEntered(MouseEvent);		// Highlight this entry on the plot.
		originalPlotLineColor = linePlot.getForeground();
		originalPlotLineStroke = linePlot.getStroke();
		

		linePlot.setForeground(originalPlotLineColor.brighter().brighter());
		BasicStroke stroke = (BasicStroke) originalPlotLineStroke;
		if(stroke == null) {;		// Highlight this entry on the plot.
		originalPlotLineColor = linePlot.getForeground();
		originalPlotLineStroke = linePlot.getStroke();

		linePlot.setForeground(originalPlotLineColor.brighter().brighter());
		BasicStroke stroke = (BasicStroke) originalPlotLineStroke;
		if(stroke == null) {;		linePlot.setForeground(originalPlotLineColor.brighter());
		
		if(originalPlotLineStroke == null) {
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_c9cef_79f38/rev_c9cef-79f38;/src/java/org/apache/cassandra/hadoop/cql3/CqlPagingRecordReader;retrieveKeys();        parseKeyValidators(ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(2).getValue())));;        parseKeyValidators(ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(2).getValue())));
        ;        Column rawKeyValidator = cqlRow.columns.get(2);
        String validator = ByteBufferUtil.string(ByteBuffer.wrap(rawKeyValidator.getValue()));
        logger.debug("row key validator: {}", validator);
        keyValidator = parseType(validator);

        if (keyValidator instanceof CompositeType)
        {
            List<AbstractType<?>> types = ((CompositeType) keyValidator).types;
            for (int i = 0; i < partitionBoundColumns.size(); i++)
                partitionBoundColumns.get(i).validator = types.get(i);
        }
        else
        {
            partitionBoundColumns.get(0).validator = keyValidator;
        }
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_c27cd_21734/rev_c27cd-21734;/tests/unit/com/opengamma/math/rootfinding/MultiInstrumentSingleCurveBootStrap;testSingleJacobian();    //    final JacobianCalculator jacobianFD = new FiniteDifferenceJacobianCalculator(1e-8);
    //    final DoubleMatrix2D jacExact = SINGLE_CURVE_JACOBIAN.evaluate(X0, SINGLE_CURVE_FINDER);
    //    final DoubleMatrix2D jacFD = jacobianFD.evaluate(X0, SINGLE_CURVE_FINDER);
    //    //System.out.println("exact: " + jacExact.toString());
    //System.out.println("FD: " + jacFD.toString());;    final JacobianCalculator jacobianFD = new FiniteDifferenceJacobianCalculator(1e-8);
    final DoubleMatrix2D jacExact = SINGLE_CURVE_JACOBIAN.evaluate(X0, SINGLE_CURVE_FINDER);
    final DoubleMatrix2D jacFD = jacobianFD.evaluate(X0, SINGLE_CURVE_FINDER);
    //System.out.println("exact: " + jacExact.toString());
    //System.out.println("FD: " + jacFD.toString());;    final JacobianCalculator jacobianFD = new FiniteDifferenceJacobianCalculator(1e-8);
    final DoubleMatrix2D jacExact = SINGLE_CURVE_JACOBIAN.evaluate(X0, SINGLE_CURVE_FINDER);
    final DoubleMatrix2D jacFD = jacobianFD.evaluate(X0, SINGLE_CURVE_FINDER);
    // System.out.println("exact: " + jacExact.toString());
    // System.out.println("FD: " + jacFD.toString());
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_c573c_cd806/rev_c573c-cd806;/src/java/org/apache/cassandra/tools/NodeProbe;getCfsProxy(String,String);            Set<ObjectName> beans = mbeanServerConn.queryNames(new ObjectName("org.apache.cassandra.db:type=*ColumnFamilies,keyspace=" + ks + ",columnfamily=" + cf), null);
            if (beans.isEmpty())
                throw new MalformedObjectNameException("couldn't find that bean");
            assert beans.size() == 1;
            for (ObjectName bean : beans)
                cfsProxy = JMX.newMBeanProxy(mbeanServerConn, bean, ColumnFamilyStoreMBean.class);;            cfsProxy = JMX.newMBeanProxy(mbeanServerConn,
                    new ObjectName("org.apache.cassandra.db:type=ColumnFamilies,keyspace="+ks+",columnfamily="+cf), 
                    ColumnFamilyStoreMBean.class);;            cfsProxy = JMX.newMBeanProxy(mbeanServerConn,
                    new ObjectName("org.apache.cassandra.db:type=ColumnFamilies,keyspace="+ks+",columnfamily="+cf),
                    ColumnFamilyStoreMBean.class);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_c7260_5185f/rev_c7260-5185f;/projects/OG-Analytics/src/com/opengamma/financial/model/finiteDifference/ExplicitFiniteDifference2D;solve(ConvectionDiffusion2DPDEDataBundle,int,int,int,double,BoundaryCondition,BoundaryCondition,BoundaryCondition,BoundaryCondition,Cube<Double,Double,Double,Double>);
      for (int i = 0; i <= xSteps; i++) {
        vNew[i][0] = v[i][0];
        vNew[i][ySteps] = v[i][ySteps];;      
      for (int i = 0; i <= xSteps; i++) {
        vNew[i][0] = v[i][0];
        vNew[i][ySteps] = v[i][ySteps];;
      // for (int i = 0; i <= xSteps; i++) {
      // vNew[i][0] = v[i][0];
      // vNew[i][ySteps] = v[i][ySteps];
      // }
      // for (int j = 0; j <= ySteps; j++) {
      // vNew[0][j] = v[0][j];
      // vNew[xSteps][j] = v[xSteps][j];
      // }
      
      
      for (int i = 1; i < xSteps; i++) {
        double[] temp = yLowerBoundary.getRightMatrixCondition(pdeData, t);
        sum = 0;
        for (int n = 0; n < temp.length; n++) {
          sum += temp[n] * v[i][n];
        }
        double q = sum + yLowerBoundary.getConstant(pdeData, t);

        sum = 0;
        temp = yLowerBoundary.getLeftMatrixCondition(pdeData, t);
        for (int k1 = 1; k1 < temp.length; k1++) {
          sum += temp[k1] * vNew[i][k1];
        }
        vNew[i][0] = (q - sum) / temp[0];

        temp = yUpperBoundary.getRightMatrixCondition(pdeData, t);
        sum = 0;
        for (int n = 0; n < temp.length; n++) {
          sum += temp[n] * v[i][ySteps + n + 1 - temp.length];
        }
        q = sum + yUpperBoundary.getConstant(pdeData, t);

        sum = 0;
        temp = yUpperBoundary.getLeftMatrixCondition(pdeData, t);
        for (int k1 = 0; k1 < temp.length - 1; k1++) {
          sum += temp[k1] * vNew[i][ySteps + k1 + 1 - temp.length];
        }

        vNew[i][ySteps] = (q - sum) / temp[temp.length - 1];
/home/ines/gjcc/fpfnanalysis/samplerpl/java_realmjava/revisions/rev_cb35f_a98a4/rev_cb35f-a98a4;/tightdb-java-test/src/test/java/com/tightdb/JNITransactions;mustWriteCommit2();	    }
	    finally {
			clear();
	    }	    ;	    }
	    finally {
	        db.close();
	    }	    ;		} finally {
			db.close();
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_gradle/revisions/rev_d7c74_10cb3/rev_d7c74-10cb3;/subprojects/core-impl/src/main/groovy/org/gradle/api/internal/artifacts/repositories/resolver/MavenResolver;getTypedArtifacts(ModuleVersionMetaData,Class<?extendsSoftwareArtifact>);public Set<ModuleVersionArtifactMetaData> getTypedArtifacts(ModuleVersionMetaData module, Class<? extends SoftwareArtifact> artifactType) {;public Set<? extends ComponentArtifactMetaData> getTypedArtifacts(ModuleVersionMetaData module, Class<? extends SoftwareArtifact> artifactType) {;public Set<? extends ComponentArtifactMetaData> getTypedArtifacts(ModuleVersionMetaData module, Class<? extends SoftwareArtifact> artifactType) {
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_d9c19_1b019/rev_d9c19-1b019;/src/java/voldemort/server/rebalance/Rebalancer;attemptRebalance(RebalancePartitionsInfo);        adminClient.waitForCompletion(stealInfo.getStealerId(),
                                      rebalanceAsyncId,
                                      voldemortConfig.getAdminSocketTimeout(),
                                      TimeUnit.SECONDS);;        for(String storeName: unbalanceStoreList) {
            AdminClient adminClient = RebalanceUtils.createTempAdminClient(voldemortConfig,
                                                                           metadataStore.getCluster());
            try {
                int rebalanceAsyncId = rebalanceLocalNode(storeName, stealInfo);
                
                adminClient.waitForCompletion(stealInfo.getStealerId(),
                                              rebalanceAsyncId,
                                              voldemortConfig.getAdminSocketTimeout(),
                                              TimeUnit.SECONDS);
                // remove store from rebalance list
                stealInfo.getUnbalancedStoreList().remove(storeName);
            } catch(Exception e) {
                logger.warn("rebalanceSubTask:" + stealInfo + " failed for store:" + storeName, e);
            } finally {
                adminClient.stop();
            }
        };        for(String storeName: unbalanceStoreList) {
            AdminClient adminClient = RebalanceUtils.createTempAdminClient(voldemortConfig,
                                                                           metadataStore.getCluster());
            try {
                int rebalanceAsyncId = rebalanceLocalNode(storeName, stealInfo);

                adminClient.waitForCompletion(stealInfo.getStealerId(),
                                              rebalanceAsyncId,
                                              voldemortConfig.getAdminSocketTimeout(),
                                              TimeUnit.SECONDS);
                // remove store from rebalance list
                stealInfo.getUnbalancedStoreList().remove(storeName);
            } catch(Exception e) {
                logger.warn("rebalanceSubTask:" + stealInfo + " failed for store:" + storeName, e);
            } finally {
                adminClient.stop();
            }
        }
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_d366f_af236/rev_d366f-af236;/src/java/voldemort/store/rebalancing/RedirectingStore;proxyGet(ByteArray);            failureDetector.recordException(donorNode, System.currentTimeMillis() - start, e);
            throw new ProxyUnreachableException("Failed to reach proxy node " + donorNode, e);;            failureDetector.recordException(donorNode, e);
            throw new ProxyUnreachableException("Failed to reach proxy node "
                                                           + donorNode, e);;            failureDetector.recordException(donorNode, e);
            throw new ProxyUnreachableException("Failed to reach proxy node " + donorNode, e);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_d366f_af236/rev_d366f-af236;/src/java/voldemort/store/rebalancing/RedirectingStore;proxyGetAll(Iterable<ByteArray>);            failureDetector.recordException(donorNode, System.currentTimeMillis() - start, e);
            throw new ProxyUnreachableException("Failed to reach proxy node " + donorNode, e);;            failureDetector.recordException(donorNode, e);
            throw new ProxyUnreachableException("Failed to reach proxy node "
                                                           + donorNode, e);;            failureDetector.recordException(donorNode, e);
            throw new ProxyUnreachableException("Failed to reach proxy node " + donorNode, e);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_dc917_de8c9/rev_dc917-de8c9;/projects/OG-Financial/src/main/java/com/opengamma/financial/security/FinancialSecurityUtils;getCurrencyConstraint(ComputationTarget);    switch (target.getType()) {
      case PORTFOLIO_NODE:
        break;
      case POSITION: {
        final Security security = target.getPosition().getSecurity();
        final Currency ccy = getCurrency(security);
        if (ccy != null) {
          return ValueProperties.with(ValuePropertyNames.CURRENCY, ccy.getCode()).get();
        }
      }
        break;
      case PRIMITIVE: {
        final UniqueId uid = target.getUniqueId();
        if (uid.getScheme().equals(Currency.OBJECT_SCHEME)) {
          return ValueProperties.with(ValuePropertyNames.CURRENCY, uid.getValue()).get();
        }
      }
        break;
      case SECURITY: {
        final Security security = target.getSecurity();
        final Currency ccy = getCurrency(security);
        if (ccy != null) {
          return ValueProperties.with(ValuePropertyNames.CURRENCY, ccy.getCode()).get();
        }
      }
        break;
      case TRADE: {
        final Security security = target.getTrade().getSecurity();
        final Currency ccy = getCurrency(security);
        if (ccy != null) {
          return ValueProperties.with(ValuePropertyNames.CURRENCY, ccy.getCode()).get();
        }
      }
        break;;    switch (target.getType()) {
      case PORTFOLIO_NODE:
        break;
      case POSITION: {
        final Security security = target.getPosition().getSecurity();
        final Currency ccy = getCurrency(security);
        if (ccy != null) {
          return ValueProperties.with(ValuePropertyNames.CURRENCY, ccy.getCode()).get();
        }
      }
      break;
      case PRIMITIVE: {
        final UniqueId uid = target.getUniqueId();
        if (uid.getScheme().equals(Currency.OBJECT_SCHEME)) {
          return ValueProperties.with(ValuePropertyNames.CURRENCY, uid.getValue()).get();
        }
      }
      break;
      case SECURITY: {
        final Security security = target.getSecurity();
        final Currency ccy = getCurrency(security);
        if (ccy != null) {
          return ValueProperties.with(ValuePropertyNames.CURRENCY, ccy.getCode()).get();
        }
      }
      break;
      case TRADE: {
        final Security security = target.getTrade().getSecurity();
        final Currency ccy = getCurrency(security);
        if (ccy != null) {
          return ValueProperties.with(ValuePropertyNames.CURRENCY, ccy.getCode()).get();
        }
      }
      break;;    final Function1<ComputationTarget, ValueProperties> operation = s_getCurrencyConstraint.get(target.getType());
    if (operation != null) {
      return operation.execute(target);
    } else {
      return ValueProperties.none();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_dce20_530c4/rev_dce20-530c4;/projects/OG-Financial/tests/unit/com/opengamma/financial/analytics/ircurve/InterpolatedYieldAndDiscountCurveFunctionTest;discountCurveRequirements();    CompiledFunctionDefinition compiledFunction = function.compile(context, curveDate.atStartOfDayInZone(TimeZone.UTC));;    CompiledFunctionDefinition compiledFunction = function.compile(context, Instant.nowSystemClock());;    CompiledFunctionDefinition compiledFunction = function.compile(context, Instant.nowSystemClock());
    
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_dce20_530c4/rev_dce20-530c4;/projects/OG-Financial/tests/unit/com/opengamma/financial/analytics/ircurve/InterpolatedYieldAndDiscountCurveFunctionTest;yieldCurveRequirements();    CompiledFunctionDefinition compiledFunction = function.compile(context, curveDate.atStartOfDayInZone(TimeZone.UTC));

    requirements = compiledFunction.getRequirements(context, new ComputationTarget(ComputationTargetType.PRIMITIVE, Currency
        .getInstance("USD")));;    CompiledFunctionDefinition compiledFunction = function.compile(context, Instant.nowSystemClock());

    requirements = compiledFunction.getRequirements(context, new ComputationTarget(ComputationTargetType.PRIMITIVE, Currency
        .getInstance("USD")));;    CompiledFunctionDefinition compiledFunction = function.compile(context, Instant.nowSystemClock());
    
    requirements = compiledFunction.getRequirements(context, new ComputationTarget(ComputationTargetType.PRIMITIVE, Currency.getInstance("USD")));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_dce20_530c4/rev_dce20-530c4;/projects/OG-Financial/tests/unit/com/opengamma/financial/analytics/ircurve/InterpolatedYieldAndDiscountCurveFunctionTest;yieldCurveRequirements();    assertEquals(12, foundKeys.size());;    assertEquals(18, foundKeys.size());;    assertEquals(18, foundKeys.size());
    
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/Jedis;hdel(String,String);public Long hdel(final String key, final String... fields) {
        checkIsInMulti();
        client.hdel(key, fields);
        return client.getIntegerReply();;public Long hdel(final String key, final String field) {
        checkIsInMulti();
        client.hdel(key, field);
        return client.getIntegerReply();;public Long hdel(final String key, final String field) {
	checkIsInMulti();
	client.hdel(key, field);
	return client.getIntegerReply();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/Jedis;sadd(String,String);public Long sadd(final String key, final String... members) {
        checkIsInMulti();
        client.sadd(key, members);
        return client.getIntegerReply();;public Long sadd(final String key, final String member) {
        checkIsInMulti();
        client.sadd(key, member);
        return client.getIntegerReply();;public Long sadd(final String key, final String member) {
	checkIsInMulti();
	client.sadd(key, member);
	return client.getIntegerReply();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/Jedis;srem(String,String);public Long srem(final String key, final String... members) {
        checkIsInMulti();
        client.srem(key, members);
        return client.getIntegerReply();;public Long srem(final String key, final String member) {
        checkIsInMulti();
        client.srem(key, member);
        return client.getIntegerReply();;public Long srem(final String key, final String member) {
	checkIsInMulti();
	client.srem(key, member);
	return client.getIntegerReply();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/Jedis;zrem(String,String);public Long zrem(final String key, final String... members) {
        checkIsInMulti();
        client.zrem(key, members);
        return client.getIntegerReply();;public Long zrem(final String key, final String member) {
        checkIsInMulti();
        client.zrem(key, member);
        return client.getIntegerReply();;public Long zrem(final String key, final String member) {
	checkIsInMulti();
	client.zrem(key, member);
	return client.getIntegerReply();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/BinaryClient;hdel(byte[],byte[]);public void hdel(final byte[] key, final byte[]... fields) {
        sendCommand(HDEL, joinParameters(key, fields));;public void hdel(final byte[] key, final byte[] field) {
        sendCommand(HDEL, key, field);;public void hdel(final byte[] key, final byte[] field) {
	sendCommand(HDEL, key, field);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/BinaryClient;sadd(byte[],byte[]);public void sadd(final byte[] key, final byte[]... members) {
        sendCommand(SADD, joinParameters(key, members));;public void sadd(final byte[] key, final byte[] member) {
        sendCommand(SADD, key, member);;public void sadd(final byte[] key, final byte[] member) {
	sendCommand(SADD, key, member);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/BinaryClient;srem(byte[],byte[]);public void srem(final byte[] key, final byte[]... members) {
        sendCommand(SREM, joinParameters(key, members));;public void srem(final byte[] key, final byte[] member) {
        sendCommand(SREM, key, member);;public void srem(final byte[] key, final byte[] member) {
	sendCommand(SREM, key, member);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/BinaryClient;zrem(byte[],byte[]);public void zrem(final byte[] key, final byte[]... members) {
        sendCommand(ZREM, joinParameters( key, members));;public void zrem(final byte[] key, final byte[] member) {
        sendCommand(ZREM, key, member);;public void zrem(final byte[] key, final byte[] member) {
	sendCommand(ZREM, key, member);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/BinaryJedis;hdel(byte[],byte[]);public Long hdel(final byte[] key, final byte[]... fields) {
        checkIsInMulti();
        client.hdel(key, fields);
        return client.getIntegerReply();;public Long hdel(final byte[] key, final byte[] field) {
        checkIsInMulti();
        client.hdel(key, field);
        return client.getIntegerReply();;public Long hdel(final byte[] key, final byte[] field) {
	checkIsInMulti();
	client.hdel(key, field);
	return client.getIntegerReply();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/BinaryJedis;sadd(byte[],byte[]);public Long sadd(final byte[] key, final byte[]... members) {
        checkIsInMulti();
        client.sadd(key, members);
        return client.getIntegerReply();;public Long sadd(final byte[] key, final byte[] member) {
        checkIsInMulti();
        client.sadd(key, member);
        return client.getIntegerReply();;public Long sadd(final byte[] key, final byte[] member) {
	checkIsInMulti();
	client.sadd(key, member);
	return client.getIntegerReply();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/BinaryJedis;srem(byte[],byte[]);public Long srem(final byte[] key, final byte[]... member) {
        checkIsInMulti();
        client.srem(key, member);
        return client.getIntegerReply();;public Long srem(final byte[] key, final byte[] member) {
        checkIsInMulti();
        client.srem(key, member);
        return client.getIntegerReply();;public Long srem(final byte[] key, final byte[] member) {
	checkIsInMulti();
	client.srem(key, member);
	return client.getIntegerReply();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_dd88c_3da2f/rev_dd88c-3da2f;/src/main/java/redis/clients/jedis/BinaryJedis;zrem(byte[],byte[]);public Long zrem(final byte[] key, final byte[]... members) {
        checkIsInMulti();
        client.zrem(key, members);
        return client.getIntegerReply();;public Long zrem(final byte[] key, final byte[] member) {
        checkIsInMulti();
        client.zrem(key, member);
        return client.getIntegerReply();;public Long zrem(final byte[] key, final byte[] member) {
	checkIsInMulti();
	client.zrem(key, member);
	return client.getIntegerReply();
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_de9ff_50c3a/rev_de9ff-50c3a;/src/java/voldemort/VoldemortAdminTool;executeGetMetadata(Integer,AdminClient,String,String);            for(String key: metadataKeys) {
                System.out.println("Key - " + key);
                Versioned<String> versioned = null;
                try {
                    versioned = adminClient.getRemoteMetadata(currentNodeId, key);
                } catch(Exception e) {
                    System.out.println("Error in retrieving " + e.getMessage());;            Versioned<String> versioned = null;
            try {
                versioned = adminClient.getRemoteMetadata(currentNodeId, metadataKey);
            } catch(Exception e) {
                System.out.println("Error in retrieving " + e.getMessage());
                System.out.println();
                continue;
            }
            if(versioned == null) {
                if(directory == null) {
                    System.out.println("null");;            Versioned<String> versioned = null;
            try {
                versioned = adminClient.getRemoteMetadata(currentNodeId, metadataKey);
            } catch(Exception e) {
                System.out.println("Error in retrieving " + e.getMessage());
                System.out.println();
                continue;
            }

            if(versioned == null) {
                if(directory == null) {
                    System.out.println("null");
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_e172a_804dd/rev_e172a-804dd;/src/java/org/apache/cassandra/db/SystemTable;getOldLocalNodeIds();        Table table = Table.open(Table.SYSTEM_TABLE);
        QueryFilter filter = QueryFilter.getIdentityFilter(decorate(ALL_LOCAL_NODE_ID_KEY), new QueryPath(NODE_ID_CF));;        Table table = Table.open(Table.SYSTEM_TABLE);
        QueryFilter filter = QueryFilter.getIdentityFilter(decorate(ALL_LOCAL_NODE_ID_KEY),
                new QueryPath(NODE_ID_CF));;        Table table = Table.open(Table.SYSTEM_KS);
        QueryFilter filter = QueryFilter.getIdentityFilter(decorate(ALL_LOCAL_NODE_ID_KEY), new QueryPath(NODE_ID_CF));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_e4738_41030/rev_e4738-41030;/projects/OG-Web/src/com/opengamma/web/spring/DemoStandardFunctionConfiguration;addEquityDerivativesFunctions(List<FunctionConfiguration>);    functionConfigs.add(new ParameterizedFunctionConfiguration(EquityIndexDividendFuturesFunction.class.getName(), 
        Arrays.asList(ValueRequirementNames.PRESENT_VALUE, EquityFuturePricerFactory.MARK_TO_MARKET, "FUNDING")));
    //functionConfigs.add(new ParameterizedFunctionConfiguration(EquityFuturesFunction.class.getName(), Arrays.asList(ValueRequirementNames.PRESENT_VALUE, EquityFuturePricerFactory.COST_OF_CARRY)));
    functionConfigs.add(new ParameterizedFunctionConfiguration(EquityFuturesFunction.class.getName(), 
        Arrays.asList(ValueRequirementNames.PRESENT_VALUE, EquityFuturePricerFactory.DIVIDEND_YIELD, "FUNDING")));
    functionConfigs.add(new ParameterizedFunctionConfiguration(EquityFuturesFunction.class.getName(), ;    functionConfigs.add(new ParameterizedFunctionConfiguration(EquityFuturesFunction.class.getName(), ;    functionConfigs.add(new ParameterizedFunctionConfiguration(EquityFuturesFunction.class.getName(),
/home/ines/gjcc/fpfnanalysis/samplerpl/java_orientdb/revisions/rev_edd69_26e60/rev_edd69-26e60;/object/src/main/java/com/orientechnologies/orient/object/db/ODatabaseObjectTx;commit();  public ODatabasePojoAbstract<Object> commit() {
    try {
      // BY PASS DOCUMENT DB
      ((ODatabaseRecordTx) underlying.getUnderlying()).commit();

      if (getTransaction().getAllRecordEntries() != null) {
        // UPDATE ID & VERSION FOR ALL THE RECORDS
        Object pojo = null;
        for (ORecordOperation entry : getTransaction().getAllRecordEntries()) {
          pojo = records2Objects.get(entry.getRecord());

          if (pojo != null)
            switch (entry.type) {
            case ORecordOperation.CREATED:
              rid2Records.put(entry.getRecord().getIdentity(), (ODocument) entry.getRecord());
              OObjectSerializerHelper.setObjectID(entry.getRecord().getIdentity(), pojo);

            case ORecordOperation.UPDATED:
              OObjectSerializerHelper.setObjectVersion(entry.getRecord().getVersion(), pojo);
              break;

            case ORecordOperation.DELETED:
              OObjectSerializerHelper.setObjectID(null, pojo);
              OObjectSerializerHelper.setObjectVersion(null, pojo);

              unregisterPojo(pojo, (ODocument) entry.getRecord());
              break;
            }
        }
      }
    } finally {
      getTransaction().close();
    };	public ODatabasePojoAbstract<Object> commit() {
		try {
			// BY PASS DOCUMENT DB
			((ODatabaseRecordTx) underlying.getUnderlying()).commit();

			if (getTransaction().getAllRecordEntries() != null) {
				// UPDATE ID & VERSION FOR ALL THE RECORDS
				Object pojo = null;
				for (ORecordOperation entry : getTransaction().getAllRecordEntries()) {
					pojo = records2Objects.get(entry.getRecord());

					if (pojo != null)
						switch (entry.type) {
						case ORecordOperation.CREATED:
							rid2Records.put(entry.getRecord().getIdentity(), (ODocument) entry.getRecord());
							OObjectSerializerHelper.setObjectID(entry.getRecord().getIdentity(), pojo);

						case ORecordOperation.UPDATED:
							OObjectSerializerHelper.setObjectVersion(entry.getRecord().getVersion(), pojo);
							break;

						case ORecordOperation.DELETED:
							OObjectSerializerHelper.setObjectID(null, pojo);
							OObjectSerializerHelper.setObjectVersion(null, pojo);

							unregisterPojo(pojo, (ODocument) entry.getRecord());
							break;
						}
				}
			}
		} finally {
			getTransaction().close();
		};	public ODatabasePojoAbstract<Object> commit() {
		try {
			// BY PASS DOCUMENT DB
			((ODatabaseRecordTx) underlying.getUnderlying()).commit();

			if (getTransaction().getAllRecordEntries() != null) {
				// UPDATE ID & VERSION FOR ALL THE RECORDS
				Object pojo = null;
				for (ORecordOperation entry : getTransaction().getAllRecordEntries()) {
					pojo = records2Objects.get(entry.getRecord());

					if (pojo != null)
						switch (entry.type) {
						case ORecordOperation.CREATED:
							rid2Records.put(entry.getRecord().getIdentity(), (ODocument) entry.getRecord());
							OObjectSerializerHelper.setObjectID(entry.getRecord().getIdentity(), pojo);

            case ORecordOperation.UPDATED:
              OObjectSerializerHelper.setObjectVersion(entry.getRecord().getRecordVersion().copy(), pojo);
              break;

						case ORecordOperation.DELETED:
							OObjectSerializerHelper.setObjectID(null, pojo);
							OObjectSerializerHelper.setObjectVersion(null, pojo);

							unregisterPojo(pojo, (ODocument) entry.getRecord());
							break;
						}
				}
			}
		} finally {
			getTransaction().close();
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_orientdb/revisions/rev_edd69_26e60/rev_edd69-26e60;/object/src/main/java/com/orientechnologies/orient/object/db/ODatabaseObjectTx;checkSecurity(String,int,Object);public <DBTYPE extends ODatabase> DBTYPE checkSecurity(final String iResource, final int iOperation, Object iResourceSpecific) {
    return (DBTYPE) underlying.checkSecurity(iResource, iOperation, iResourceSpecific);
  };public <DBTYPE extends ODatabase> DBTYPE checkSecurity(final String iResource, final int iOperation, Object iResourceSpecific) {
		return (DBTYPE) underlying.checkSecurity(iResource, iOperation, iResourceSpecific);
	};public <DBTYPE extends ODatabase> DBTYPE checkSecurity(final String iResource, final int iOperation, Object... iResourcesSpecific) {
		return (DBTYPE) underlying.checkSecurity(iResource, iOperation, iResourcesSpecific);
	}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cassandra/revisions/rev_edfc0_5cda7/rev_edfc0-5cda7;/src/java/org/apache/cassandra/cql/QueryProcessor;getStatement(String);        try
        {
            // Lexer and parser
            CharStream stream = new ANTLRStringStream(queryStr);
            CqlLexer lexer = new CqlLexer(stream);
            TokenStream tokenStream = new CommonTokenStream(lexer);
            CqlParser parser = new CqlParser(tokenStream);
            
            // Parse the query string to a statement instance
            CQLStatement statement = parser.query();
            
            // The lexer and parser queue up any errors they may have encountered
            // along the way, if necessary, we turn them into exceptions here.
            lexer.throwLastRecognitionError();
            parser.throwLastRecognitionError();
            
            return statement;
        } 
        catch (RuntimeException re)
        {
            InvalidRequestException ire = new InvalidRequestException("Failed parsing statement: [" + queryStr + "] reason: " + re.getClass().getSimpleName() + " " + re.getMessage());
            ire.initCause(re);
            throw ire;
        };        // Lexer and parser
        CharStream stream = new ANTLRStringStream(queryStr);
        CqlLexer lexer = new CqlLexer(stream);
        TokenStream tokenStream = new CommonTokenStream(lexer);
        CqlParser parser = new CqlParser(tokenStream);
        
        // Parse the query string to a statement instance
        CQLStatement statement = parser.query();
        
        // The lexer and parser queue up any errors they may have encountered
        // along the way, if necessary, we turn them into exceptions here.
        lexer.throwLastRecognitionError();
        parser.throwLastRecognitionError();
        
        return statement;;        // Lexer and parser
        CharStream stream = new ANTLRStringStream(queryStr);
        CqlLexer lexer = new CqlLexer(stream);
        TokenStream tokenStream = new CommonTokenStream(lexer);
        CqlParser parser = new CqlParser(tokenStream);

        // Parse the query string to a statement instance
        CQLStatement statement = parser.query();

        // The lexer and parser queue up any errors they may have encountered
        // along the way, if necessary, we turn them into exceptions here.
        lexer.throwLastRecognitionError();
        parser.throwLastRecognitionError();

        return statement;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementSpaceServiceInstaller;installOnLocalCloud();public void installOnLocalCloud() 
			throws ProcessingUnitAlreadyDeployedException, CLIException {

		if (agentZone == null) {
			throw new IllegalStateException("Management services must be installed on management zone");
		}

		SpaceDeployment deployment = new SpaceDeployment(serviceName).addZone(serviceName);

		for (final Entry<Object, Object> prop : getContextProperties().entrySet()) {
			deployment.setContextProperty(prop.getKey().toString(), prop.getValue().toString());
		}

		for (final String requiredPUName : dependencies) {
			deployment.addDependencies(new ProcessingUnitDeploymentDependenciesConfigurer()
					.dependsOnMinimumNumberOfDeployedInstancesPerPartition(requiredPUName, 1).create());
		}

		getGridServiceManager().deploy(deployment);;public void installOnLocalCloud() 
			throws ProcessingUnitAlreadyDeployedException, CLIException {

		if (agentZone == null) {
			throw new IllegalStateException("Management services must be installed on management zone");
		}

		SpaceDeployment deployment = new SpaceDeployment(serviceName).addZone(serviceName);

		for (final Entry<Object, Object> prop : getContextProperties().entrySet()) {
			deployment.setContextProperty(prop.getKey().toString(), prop.getValue().toString());
		}

		for (final String requiredPUName : dependencies) {
			deployment.addDependencies(new ProcessingUnitDeploymentDependenciesConfigurer()
					.dependsOnMinimumNumberOfDeployedInstancesPerPartition(requiredPUName, 1).create());
		}

		getGridServiceManager().deploy(deployment);;public void installOnLocalCloud()
			throws ProcessingUnitAlreadyDeployedException, CLIException {

		if (agentZone == null) {
			throw new IllegalStateException("Management services must be installed on management zone");
		}

		final File puFile = getManagementSpacePUFile();

		final ProcessingUnitDeployment deployment =
				new ProcessingUnitDeployment(puFile).name(serviceName).addZone(serviceName);

		// SpaceDeployment deployment = new SpaceDeployment(serviceName).addZone(serviceName);

		for (final Entry<Object, Object> prop : getContextProperties().entrySet()) {
			deployment.setContextProperty(prop.getKey().toString(), prop.getValue().toString());
		}

		for (final String requiredPUName : dependencies) {
			deployment.addDependencies(new ProcessingUnitDeploymentDependenciesConfigurer()
					.dependsOnMinimumNumberOfDeployedInstancesPerPartition(requiredPUName, 1).create());
		}

		getGridServiceManager().deploy(deployment);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementSpaceServiceInstaller;waitForInstallation(AdminFacade,GridServiceAgent,long,TimeUnit);@Override
	public void waitForInstallation(final AdminFacade adminFacade, final GridServiceAgent agent, final long timeout,
			final TimeUnit timeunit) throws InterruptedException, TimeoutException, CLIException {
		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {
			/**
			 * {@inheritDoc}
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {

				final Space space = admin.getSpaces().getSpaceByName(serviceName);
				if (space != null) {
					final SpacePartition partition = space.getPartition(0);
					if (partition != null && partition.getPrimary() != null) {
						gigaspace = space.getGigaSpace();
						return true;
					}
				}
				
				logger.fine("Connecting to management space.");
				if (verbose){
					publishEvent("Connecting to management space.");
				}
				return false;
			}
		});
		
		logger.fine("Management space is available.");
		if (verbose){
			logger.fine("Management space is available.");
		};@Override
	public void waitForInstallation(final AdminFacade adminFacade, final GridServiceAgent agent, final long timeout,
			final TimeUnit timeunit) throws InterruptedException, TimeoutException, CLIException {
		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {
			/**
			 * {@inheritDoc}
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {

				final Space space = admin.getSpaces().getSpaceByName(serviceName);
				if (space != null) {
					final SpacePartition partition = space.getPartition(0);
					if (partition != null && partition.getPrimary() != null) {
						gigaspace = space.getGigaSpace();
						return true;
					}
				}
				
				logger.fine("Connecting to management space.");
				if (verbose){
					publishEvent("Connecting to management space.");
				}
				return false;
			}
		});
		
		logger.fine("Management space is available.");
		if (verbose){
			logger.fine("Management space is available.");
		};@Override
	public void waitForInstallation(final AdminFacade adminFacade, final GridServiceAgent agent, final long timeout,
			final TimeUnit timeunit) throws InterruptedException, TimeoutException, CLIException {
		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {
			/**
			 * {@inheritDoc}
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {

				final Space space = admin.getSpaces().getSpaceByName(serviceName);
				if (space != null) {
					final SpacePartition partition = space.getPartition(0);
					if (partition != null && partition.getPrimary() != null) {
						gigaspace = space.getGigaSpace();
						return true;
					}
				}

				logger.fine("Connecting to management space.");
				if (verbose) {
					publishEvent("Connecting to management space.");
				}
				return false;
			}
		});

		logger.fine("Management space is available.");
		if (verbose) {
			logger.fine("Management space is available.");
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementSpaceServiceInstaller;addListener(LocalhostBootstrapperListener);public void addListener(LocalhostBootstrapperListener listener) {
		this.eventsListenersList.add(listener);;public void addListener(LocalhostBootstrapperListener listener) {
		this.eventsListenersList.add(listener);;public void addListener(final LocalhostBootstrapperListener listener) {
		this.eventsListenersList.add(listener);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementSpaceServiceInstaller;addListeners(List<LocalhostBootstrapperListener>);public void addListeners(List<LocalhostBootstrapperListener> listeners) {
		for (LocalhostBootstrapperListener listener : listeners) {
			this.eventsListenersList.add(listener);
		};public void addListeners(List<LocalhostBootstrapperListener> listeners) {
		for (LocalhostBootstrapperListener listener : listeners) {
			this.eventsListenersList.add(listener);
		};public void addListeners(final List<LocalhostBootstrapperListener> listeners) {
		for (final LocalhostBootstrapperListener listener : listeners) {
			this.eventsListenersList.add(listener);
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementSpaceServiceInstaller;setIsLocalCloud(boolean);public void setIsLocalCloud(boolean isLocalCloud) {
		this.isLocalcloud = isLocalCloud;;public void setIsLocalCloud(boolean isLocalCloud) {
		this.isLocalcloud = isLocalCloud;
		;public void setIsLocalCloud(final boolean isLocalCloud) {
		this.isLocalcloud = isLocalCloud;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementWebServiceInstaller;installLocalCloud();public void installLocalCloud() throws CLIException {

		if (agentZone == null) {
			throw new IllegalStateException("Management services must be installed on management zone");
		}
		
		final ProcessingUnitDeployment deployment = new ProcessingUnitDeployment(
				getGSFile(warFile))
				.addZone(serviceName) 
				.name(serviceName);

		for (final Entry<Object, Object> prop : getContextProperties().entrySet()) {
			deployment.setContextProperty(prop.getKey().toString(), prop.getValue().toString());
		}

		for (final String requiredPUName : dependencies) {
			deployment.addDependencies(new ProcessingUnitDeploymentDependenciesConfigurer()
					.dependsOnMinimumNumberOfDeployedInstancesPerPartition(requiredPUName, 1).create());
		}

		getGridServiceManager().deploy(deployment);;public void installLocalCloud() throws CLIException {

		if (agentZone == null) {
			throw new IllegalStateException("Management services must be installed on management zone");
		}
		
		final ProcessingUnitDeployment deployment = new ProcessingUnitDeployment(
				getGSFile(warFile))
				.addZone(serviceName) 
				.name(serviceName);

		for (final Entry<Object, Object> prop : getContextProperties().entrySet()) {
			deployment.setContextProperty(prop.getKey().toString(), prop.getValue().toString());
		}

		for (final String requiredPUName : dependencies) {
			deployment.addDependencies(new ProcessingUnitDeploymentDependenciesConfigurer()
					.dependsOnMinimumNumberOfDeployedInstancesPerPartition(requiredPUName, 1).create());
		}

		getGridServiceManager().deploy(deployment);;public void installLocalCloud() throws CLIException {

		if (agentZone == null) {
			throw new IllegalStateException("Management services must be installed on management zone");
		}

		final ProcessingUnitDeployment deployment = new ProcessingUnitDeployment(
				getGSFile(warFile))
				.addZone(serviceName)
				.name(serviceName);

		for (final Entry<Object, Object> prop : getContextProperties().entrySet()) {
			deployment.setContextProperty(prop.getKey().toString(), prop.getValue().toString());
		}

		for (final String requiredPUName : dependencies) {
			deployment.addDependencies(new ProcessingUnitDeploymentDependenciesConfigurer()
					.dependsOnMinimumNumberOfDeployedInstancesPerPartition(requiredPUName, 1).create());
		}

		getGridServiceManager().deploy(deployment);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementWebServiceInstaller;waitForProcessingUnitInstance(GridServiceAgent,long,TimeUnit);public URL waitForProcessingUnitInstance(final GridServiceAgent agent, final long timeout, final TimeUnit timeunit)
			throws InterruptedException, TimeoutException, CLIException {

		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {
			boolean messagePublished = false;
			/**
			 * {@inheritDoc}
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {
				logger.fine("Waiting for " + serviceName + " service.");
				if (!messagePublished){
					String message = ShellUtils.getMessageBundle().getString("starting_management_web_service");
					publishEvent(MessageFormat.format(message, serviceName.toUpperCase()));
					messagePublished = true;
				}
				final ProcessingUnit pu = getProcessingUnit();
				boolean isDone = false;
				if (pu != null) {
					for (final ProcessingUnitInstance instance : pu) {
						if (agent.equals(instance.getGridServiceContainer().getGridServiceAgent())) {
							isDone = true;
							break;
						}
					}
				}
				if (!isDone){
					publishEvent(null);
				}
				return isDone;
			}
		});

		// TODO [noak]: verify this always the correct port (SSL-wise) ?
		final URL url = getWebProcessingUnitURL(agent, getProcessingUnit(), isSecureConnection);
		final String serviceNameCapital = StringUtils.capitalize(serviceName);
		String returnMessage = ShellUtils.getMessageBundle().getString("web_service_available_at");
		logger.fine(returnMessage);
		publishEvent(MessageFormat.format(returnMessage, serviceNameCapital, url));
		return url;;public URL waitForProcessingUnitInstance(final GridServiceAgent agent, final long timeout, final TimeUnit timeunit)
			throws InterruptedException, TimeoutException, CLIException {

		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {
			boolean messagePublished = false;
			/**
			 * {@inheritDoc}
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {
				logger.fine("Waiting for " + serviceName + " service.");
				if (!messagePublished){
					String message = ShellUtils.getMessageBundle().getString("starting_management_web_service");
					publishEvent(MessageFormat.format(message, serviceName.toUpperCase()));
					messagePublished = true;
				}
				final ProcessingUnit pu = getProcessingUnit();
				boolean isDone = false;
				if (pu != null) {
					for (final ProcessingUnitInstance instance : pu) {
						if (agent.equals(instance.getGridServiceContainer().getGridServiceAgent())) {
							isDone = true;
							break;
						}
					}
				}
				if (!isDone){
					publishEvent(null);
				}
				return isDone;
			}
		});

		// TODO [noak]: verify this always the correct port (SSL-wise) ?
		final URL url = getWebProcessingUnitURL(agent, getProcessingUnit(), isSecureConnection);
		final String serviceNameCapital = StringUtils.capitalize(serviceName);
		String returnMessage = ShellUtils.getMessageBundle().getString("web_service_available_at");
		logger.fine(returnMessage);
		publishEvent(MessageFormat.format(returnMessage, serviceNameCapital, url));
		return url;;public URL waitForProcessingUnitInstance(final GridServiceAgent agent, final long timeout, final TimeUnit timeunit)
			throws InterruptedException, TimeoutException, CLIException {

		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {
			private boolean messagePublished = false;

			/**
			 * {@inheritDoc}
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {
				logger.fine("Waiting for " + serviceName + " service.");
				if (!messagePublished) {
					final String message = ShellUtils.getMessageBundle().getString("starting_management_web_service");
					publishEvent(MessageFormat.format(message, serviceName.toUpperCase()));
					messagePublished = true;
				}
				final ProcessingUnit pu = getProcessingUnit();
				boolean isDone = false;
				if (pu != null) {
					for (final ProcessingUnitInstance instance : pu) {
						if (agent.equals(instance.getGridServiceContainer().getGridServiceAgent())) {
							isDone = true;
							break;
						}
					}
				}
				if (!isDone) {
					publishEvent(null);
				}
				return isDone;
			}
		});

		// TODO [noak]: verify this always the correct port (SSL-wise) ?
		final URL url = getWebProcessingUnitURL(agent, getProcessingUnit(), isSecureConnection);
		final String serviceNameCapital = StringUtils.capitalize(serviceName);
		final String returnMessage = ShellUtils.getMessageBundle().getString("web_service_available_at");
		logger.fine(returnMessage);
		publishEvent(MessageFormat.format(returnMessage, serviceNameCapital, url));
		return url;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementWebServiceInstaller;waitForConnection(AdminFacade,String,String,URL,long,TimeUnit);private void waitForConnection(final AdminFacade adminFacade, final String username, final String password,
			final URL url, final long timeout, final TimeUnit timeunit)
					throws InterruptedException, TimeoutException,
			CLIException {
		adminFacade.disconnect();
		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {
			/**
			 * {@inheritDoc}
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {

				try {
					adminFacade.connect(username, password, url.toString(), isSecureConnection);
					return true;
				} catch (final CLIException e) {
					if (verbose) {
						logger.log(Level.INFO, "Error connecting to web service [" + serviceName + "].", e);
					}
				}
				logger.log(Level.INFO, "Connecting to web service [" + serviceName + "].");
				return false;
			}
		});;private void waitForConnection(final AdminFacade adminFacade, final String username, final String password,
			final URL url, final long timeout, final TimeUnit timeunit)
					throws InterruptedException, TimeoutException,
			CLIException {
		adminFacade.disconnect();
		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {
			/**
			 * {@inheritDoc}
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {

				try {
					adminFacade.connect(username, password, url.toString(), isSecureConnection);
					return true;
				} catch (final CLIException e) {
					if (verbose) {
						logger.log(Level.INFO, "Error connecting to web service [" + serviceName + "].", e);
					}
				}
				logger.log(Level.INFO, "Connecting to web service [" + serviceName + "].");
				return false;
			}
		});;private void waitForConnection(final AdminFacade adminFacade, final String username, final String password,
			final URL url, final long timeout, final TimeUnit timeunit)
			throws InterruptedException, TimeoutException,
			CLIException {
		adminFacade.disconnect();
		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {
			/**
			 * {@inheritDoc}
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {

				try {
					adminFacade.connect(username, password, url.toString(), isSecureConnection);
					return true;
				} catch (final CLIException e) {
					if (verbose) {
						logger.log(Level.INFO, "Error connecting to web service [" + serviceName + "].", e);
					}
				}
				logger.log(Level.INFO, "Connecting to web service [" + serviceName + "].");
				return false;
			}
		});
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementWebServiceInstaller;getWebProcessingUnitURL(GridServiceAgent,ProcessingUnit,boolean);public static URL getWebProcessingUnitURL(final GridServiceAgent agent, final ProcessingUnit pu, 
			final boolean isSecureConnection) {
		ProcessingUnitInstance pui = null;

		for (final ProcessingUnitInstance instance : pu.getInstances()) {
			if (instance.getGridServiceContainer() != null
					&& instance.getGridServiceContainer().getGridServiceAgent() != null
					&& instance.getGridServiceContainer().getGridServiceAgent().equals(agent)) {
				pui = instance;
			}
		}

		if (pui == null) {
			throw new IllegalStateException("Failed finding " + pu.getName() + " on "
					+ agent.getMachine().getHostAddress());
		}

		final Map<String, ServiceDetails> alldetails = pui.getServiceDetailsByServiceId();

		final ServiceDetails details = alldetails.get("jee-container");
		final String host = details.getAttributes().get("host").toString();
		final String port = details.getAttributes().get("port").toString();
		final String ctx = details.getAttributes().get("context-path").toString();
		final String url = ShellUtils.getRestProtocol(isSecureConnection) + "://" + host + ":" + port + ctx;
		try {
			return new URL(url);
		} catch (final MalformedURLException e) {
			// this is a bug since we formed the URL correctly
			throw new IllegalStateException(e);
		};public static URL getWebProcessingUnitURL(final GridServiceAgent agent, final ProcessingUnit pu, 
			final boolean isSecureConnection) {
		ProcessingUnitInstance pui = null;

		for (final ProcessingUnitInstance instance : pu.getInstances()) {
			if (instance.getGridServiceContainer() != null
					&& instance.getGridServiceContainer().getGridServiceAgent() != null
					&& instance.getGridServiceContainer().getGridServiceAgent().equals(agent)) {
				pui = instance;
			}
		}

		if (pui == null) {
			throw new IllegalStateException("Failed finding " + pu.getName() + " on "
					+ agent.getMachine().getHostAddress());
		}

		final Map<String, ServiceDetails> alldetails = pui.getServiceDetailsByServiceId();

		final ServiceDetails details = alldetails.get("jee-container");
		final String host = details.getAttributes().get("host").toString();
		final String port = details.getAttributes().get("port").toString();
		final String ctx = details.getAttributes().get("context-path").toString();
		final String url = ShellUtils.getRestProtocol(isSecureConnection) + "://" + host + ":" + port + ctx;
		try {
			return new URL(url);
		} catch (final MalformedURLException e) {
			// this is a bug since we formed the URL correctly
			throw new IllegalStateException(e);
		};public static URL getWebProcessingUnitURL(final GridServiceAgent agent, final ProcessingUnit pu,
			final boolean isSecureConnection) {
		ProcessingUnitInstance pui = null;

		for (final ProcessingUnitInstance instance : pu.getInstances()) {
			if (instance.getGridServiceContainer() != null
					&& instance.getGridServiceContainer().getGridServiceAgent() != null
					&& instance.getGridServiceContainer().getGridServiceAgent().equals(agent)) {
				pui = instance;
			}
		}

		if (pui == null) {
			throw new IllegalStateException("Failed finding " + pu.getName() + " on "
					+ agent.getMachine().getHostAddress());
		}

		final Map<String, ServiceDetails> alldetails = pui.getServiceDetailsByServiceId();

		final ServiceDetails details = alldetails.get("jee-container");
		final String host = details.getAttributes().get("host").toString();
		final String port = details.getAttributes().get("port").toString();
		final String ctx = details.getAttributes().get("context-path").toString();
		final String url = ShellUtils.getRestProtocol(isSecureConnection) + "://" + host + ":" + port + ctx;
		try {
			return new URL(url);
		} catch (final MalformedURLException e) {
			// this is a bug since we formed the URL correctly
			throw new IllegalStateException(e);
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementWebServiceInstaller;addListener(LocalhostBootstrapperListener);public void addListener(LocalhostBootstrapperListener listener) {
		this.eventsListenersList.add(listener);;public void addListener(LocalhostBootstrapperListener listener) {
		this.eventsListenersList.add(listener);;public void addListener(final LocalhostBootstrapperListener listener) {
		this.eventsListenersList.add(listener);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementWebServiceInstaller;addListeners(List<LocalhostBootstrapperListener>);public void addListeners(List<LocalhostBootstrapperListener> listeners) {
		for (LocalhostBootstrapperListener listener : listeners) {
			this.eventsListenersList.add(listener);
		};public void addListeners(List<LocalhostBootstrapperListener> listeners) {
		for (LocalhostBootstrapperListener listener : listeners) {
			this.eventsListenersList.add(listener);
		};public void addListeners(final List<LocalhostBootstrapperListener> listeners) {
		for (final LocalhostBootstrapperListener listener : listeners) {
			this.eventsListenersList.add(listener);
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementWebServiceInstaller;setIsLocalCloud(boolean);public void setIsLocalCloud(boolean isLocalCloud) {
		this.isLocalcloud = isLocalCloud;;public void setIsLocalCloud(boolean isLocalCloud) {
		this.isLocalcloud = isLocalCloud;;public void setIsLocalCloud(final boolean isLocalCloud) {
		this.isLocalcloud = isLocalCloud;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/ManagementWebServiceInstaller;setIsSecureConnection(boolean);public void setIsSecureConnection(boolean isSecureConnection) {
		this.isSecureConnection = isSecureConnection;;public void setIsSecureConnection(boolean isSecureConnection) {
		this.isSecureConnection = isSecureConnection;;public void setIsSecureConnection(final boolean isSecureConnection) {
		this.isSecureConnection = isSecureConnection;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/LocalhostGridAgentBootstrapper;startLocalCloudOnLocalhostAndWait(String,String,String,String,String,String,int,TimeUnit);public void startLocalCloudOnLocalhostAndWait(final String securityProfile, final String securityFilePath, 
			final String username, final String password, final String keystoreFilePath, final String keystorePassword,
			final int timeout, final TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {

		setGridServiceAgentZone(LOCALCLOUD_GSA_ZONES);

		setDefaultNicAddress();

		setDefaultLocalcloudLookup();

		if (isWindows()) {
			startManagementOnLocalhostAndWaitInternal(LOCALCLOUD_WIN_MANAGEMENT_ARGUMENTS, securityProfile, 
					securityFilePath, username, password, keystoreFilePath, keystorePassword, timeout, timeunit, true);
		} else {
			startManagementOnLocalhostAndWaitInternal(LOCALCLOUD_LINUX_MANAGEMENT_ARGUMENTS, securityProfile, 
					securityFilePath, username, password, keystoreFilePath, keystorePassword, timeout, timeunit, true);
		};public void startLocalCloudOnLocalhostAndWait(final String securityProfile, final String securityFilePath, 
			final String username, final String password, final String keystoreFilePath, final String keystorePassword,
			final int timeout, final TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {

		setGridServiceAgentZone(LOCALCLOUD_GSA_ZONES);

		setDefaultNicAddress();

		setDefaultLocalcloudLookup();

		if (isWindows()) {
			startManagementOnLocalhostAndWaitInternal(LOCALCLOUD_WIN_MANAGEMENT_ARGUMENTS, securityProfile, 
					securityFilePath, username, password, keystoreFilePath, keystorePassword, timeout, timeunit, true);
		} else {
			startManagementOnLocalhostAndWaitInternal(LOCALCLOUD_LINUX_MANAGEMENT_ARGUMENTS, securityProfile, 
					securityFilePath, username, password, keystoreFilePath, keystorePassword, timeout, timeunit, true);
		};public void startLocalCloudOnLocalhostAndWait(final String securityProfile, final String securityFilePath,
			final String username, final String password, final String keystoreFilePath, final String keystorePassword,
			final int timeout, final TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {

		setGridServiceAgentZone(LOCALCLOUD_GSA_ZONES);

		setDefaultNicAddress();

		setDefaultLocalcloudLookup();

		if (isWindows()) {
			startManagementOnLocalhostAndWaitInternal(LOCALCLOUD_WIN_MANAGEMENT_ARGUMENTS, securityProfile,
					securityFilePath, username, password, keystoreFilePath, keystorePassword, timeout, timeunit, true);
		} else {
			startManagementOnLocalhostAndWaitInternal(LOCALCLOUD_LINUX_MANAGEMENT_ARGUMENTS, securityProfile,
					securityFilePath, username, password, keystoreFilePath, keystorePassword, timeout, timeunit, true);
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/LocalhostGridAgentBootstrapper;startManagementOnLocalhostAndWait(String,String,String,String,String,String,int,TimeUnit);public void startManagementOnLocalhostAndWait(final String securityProfile, final String securityFilePath,
			final String username, final String password, final String keystoreFilePath, final String keystorePassword,
			final int timeout, final TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {

		setGridServiceAgentZone(MANAGEMENT_ZONE);

		setDefaultNicAddress();

		startManagementOnLocalhostAndWaitInternal(CLOUD_MANAGEMENT_ARGUMENTS, securityProfile, securityFilePath,
				username, password, keystoreFilePath, keystorePassword, timeout, timeunit, false);;public void startManagementOnLocalhostAndWait(final String securityProfile, final String securityFilePath,
			final String username, final String password, final String keystoreFilePath, final String keystorePassword,
			final int timeout, final TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {

		setGridServiceAgentZone(MANAGEMENT_ZONE);

		setDefaultNicAddress();

		startManagementOnLocalhostAndWaitInternal(CLOUD_MANAGEMENT_ARGUMENTS, securityProfile, securityFilePath,
				username, password, keystoreFilePath, keystorePassword, timeout, timeunit, false);;public void startManagementOnLocalhostAndWait(final String securityProfile, final String securityFilePath,
			final String username, final String password, final String keystoreFilePath, final String keystorePassword,
			final int timeout, final TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {

		try {
			this.cloud = ServiceReader.readCloud(new File(this.cloudFilePath));
		} catch (final IOException e) {
			throw new CLIException("Failed to read cloud file: " + e.getMessage(), e);
		} catch (final DSLException e) {
			throw new CLIException("Failed to read cloud file: " + e.getMessage(), e);
		}

		setGridServiceAgentZone(MANAGEMENT_ZONE);

		setDefaultNicAddress();

		startManagementOnLocalhostAndWaitInternal(CLOUD_MANAGEMENT_ARGUMENTS, securityProfile, securityFilePath,
				username, password, keystoreFilePath, keystorePassword, timeout, timeunit, false);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/LocalhostGridAgentBootstrapper;uninstallApplications(long,TimeUnit);private void uninstallApplications(final long timeout, final TimeUnit timeunit) throws InterruptedException,
			TimeoutException, CLIException {

		Collection<String> applicationsList = null;
		boolean applicationsExist = false;
		try {
			if (!adminFacade.isConnected()) {
				throw new CLIException("Failed to fetch applications list. "
						+ "Client is not connected to the rest server.");
			}

			applicationsList = adminFacade.getApplicationNamesList();
			// If there existed other applications besides the management.
			applicationsExist = applicationsList.size() > 1;
		} catch (final CLIException e) {
			if (!force) {
				throw new CLIStatusException(e, "failed_to_access_rest_before_teardown");
			}
			final String errorMessage = "Failed to fetch the currently deployed applications list."
					+ " Continuing teardown-localcloud.";
			if (verbose) {
				logger.log(Level.FINE, errorMessage, e);
				publishEvent(errorMessage + System.getProperty("line.separator") + e.toString());
			} else {
				logger.log(Level.FINE, errorMessage);
				publishEvent(errorMessage);
			}
			// Suppress exception. continue with teardown.
			return;
		}

		if (applicationsExist && !force) {
			throw new CLIStatusException("apps_deployed_before_teardown_localcloud", applicationsList.toString());
		}
		final String uninstallMessage = ShellUtils.getMessageBundle().getString(
				"uninstalling_applications_before_teardown");
		publishEvent(uninstallMessage);
		for (final String appName : applicationsList) {
			try {
				if (!appName.equals(MANAGEMENT_APPLICATION)) {
					logger.fine("Uninstalling application " + appName);
					final Map<String, String> uninstallApplicationResponse = adminFacade.uninstallApplication(appName,
							(int) timeout);
					if (uninstallApplicationResponse.containsKey(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID)) {
						final String pollingID = uninstallApplicationResponse
								.get(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID);
						this.adminFacade.waitForLifecycleEvents(pollingID, (int) timeout,
                                CloudifyConstants.TIMEOUT_ERROR_MESSAGE);
					} else {
						publishEvent("Failed to retrieve lifecycle logs from rest. " + "Check logs for more details.");
					}
				}
			} catch (final CLIException e) {
				final String errorMessage = "Application " + appName + " faild to uninstall."
						+ " Continuing teardown-localcloud.";
				if (!force) {
					throw new CLIStatusException(e, "failed_to_uninstall_app_before_teardown", appName);
				}
				if (verbose) {
					logger.log(Level.FINE, errorMessage, e);
					publishEvent(errorMessage);
				} else {
					logger.log(Level.FINE, errorMessage);
				}
			}
		}
		if (applicationsExist) {
			waitForUninstallApplications(timeout, timeunit);
			publishEvent(ShellUtils.getMessageBundle().getString("all_apps_removed_before_teardown"));
			logger.fine(ShellUtils.getMessageBundle().getString("all_apps_removed_before_teardown"));
		};private void uninstallApplications(final long timeout, final TimeUnit timeunit) throws InterruptedException,
			TimeoutException, CLIException {

		Collection<String> applicationsList = null;
		boolean applicationsExist = false;
		try {
			if (!adminFacade.isConnected()) {
				throw new CLIException("Failed to fetch applications list. "
						+ "Client is not connected to the rest server.");
			}

			applicationsList = adminFacade.getApplicationNamesList();
			// If there existed other applications besides the management.
			applicationsExist = applicationsList.size() > 1;
		} catch (final CLIException e) {
			if (!force) {
				throw new CLIStatusException(e, "failed_to_access_rest_before_teardown");
			}
			final String errorMessage = "Failed to fetch the currently deployed applications list."
					+ " Continuing teardown-localcloud.";
			if (verbose) {
				logger.log(Level.FINE, errorMessage, e);
				publishEvent(errorMessage + System.getProperty("line.separator") + e.toString());
			} else {
				logger.log(Level.FINE, errorMessage);
				publishEvent(errorMessage);
			}
			// Suppress exception. continue with teardown.
			return;
		}

		if (applicationsExist && !force) {
			throw new CLIStatusException("apps_deployed_before_teardown_localcloud", applicationsList.toString());
		}
		final String uninstallMessage = ShellUtils.getMessageBundle().getString(
				"uninstalling_applications_before_teardown");
		publishEvent(uninstallMessage);
		for (final String appName : applicationsList) {
			try {
				if (!appName.equals(MANAGEMENT_APPLICATION)) {
					logger.fine("Uninstalling application " + appName);
					final Map<String, String> uninstallApplicationResponse = adminFacade.uninstallApplication(appName,
							(int) timeout);
					if (uninstallApplicationResponse.containsKey(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID)) {
						final String pollingID = uninstallApplicationResponse
								.get(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID);
						this.adminFacade.waitForLifecycleEvents(pollingID, (int) timeout,
                                CloudifyConstants.TIMEOUT_ERROR_MESSAGE);
					} else {
						publishEvent("Failed to retrieve lifecycle logs from rest. " + "Check logs for more details.");
					}
				}
			} catch (final CLIException e) {
				final String errorMessage = "Application " + appName + " faild to uninstall."
						+ " Continuing teardown-localcloud.";
				if (!force) {
					throw new CLIStatusException(e, "failed_to_uninstall_app_before_teardown", appName);
				}
				if (verbose) {
					logger.log(Level.FINE, errorMessage, e);
					publishEvent(errorMessage);
				} else {
					logger.log(Level.FINE, errorMessage);
				}
			}
		}
		if (applicationsExist) {
			waitForUninstallApplications(timeout, timeunit);
			publishEvent(ShellUtils.getMessageBundle().getString("all_apps_removed_before_teardown"));
			logger.fine(ShellUtils.getMessageBundle().getString("all_apps_removed_before_teardown"));
		};private void uninstallApplications(final long timeout, final TimeUnit timeunit) throws InterruptedException,
			TimeoutException, CLIException {

		Collection<String> applicationsList = null;
		boolean applicationsExist = false;
		try {
			if (!adminFacade.isConnected()) {
				throw new CLIException("Failed to fetch applications list. "
						+ "Client is not connected to the rest server.");
			}

			applicationsList = adminFacade.getApplicationNamesList();
			// If there existed other applications besides the management.
			applicationsExist = applicationsList.size() > 1;
		} catch (final CLIException e) {
			if (!force) {
				throw new CLIStatusException(e, "failed_to_access_rest_before_teardown");
			}
			final String errorMessage = "Failed to fetch the currently deployed applications list."
					+ " Continuing teardown-localcloud.";
			if (verbose) {
				logger.log(Level.FINE, errorMessage, e);
				publishEvent(errorMessage + System.getProperty("line.separator") + e.toString());
			} else {
				logger.log(Level.FINE, errorMessage);
				publishEvent(errorMessage);
			}
			// Suppress exception. continue with teardown.
			return;
		}

		if (applicationsExist && !force) {
			throw new CLIStatusException("apps_deployed_before_teardown_localcloud", applicationsList.toString());
		}
		final String uninstallMessage = ShellUtils.getMessageBundle().getString(
				"uninstalling_applications_before_teardown");
		publishEvent(uninstallMessage);
		for (final String appName : applicationsList) {
			try {
				if (!appName.equals(MANAGEMENT_APPLICATION)) {
					logger.fine("Uninstalling application " + appName);
					final Map<String, String> uninstallApplicationResponse = adminFacade.uninstallApplication(appName,
							(int) timeout);
					if (uninstallApplicationResponse.containsKey(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID)) {
						final String pollingID = uninstallApplicationResponse
								.get(CloudifyConstants.LIFECYCLE_EVENT_CONTAINER_ID);
						this.adminFacade.waitForLifecycleEvents(pollingID, (int) timeout,
								CloudifyConstants.TIMEOUT_ERROR_MESSAGE);
					} else {
						publishEvent("Failed to retrieve lifecycle logs from rest. " + "Check logs for more details.");
					}
				}
			} catch (final CLIException e) {
				final String errorMessage = "Application " + appName + " faild to uninstall."
						+ " Continuing teardown-localcloud.";
				if (!force) {
					throw new CLIStatusException(e, "failed_to_uninstall_app_before_teardown", appName);
				}
				if (verbose) {
					logger.log(Level.FINE, errorMessage, e);
					publishEvent(errorMessage);
				} else {
					logger.log(Level.FINE, errorMessage);
				}
			}
		}
		if (applicationsExist) {
			waitForUninstallApplications(timeout, timeunit);
			publishEvent(ShellUtils.getMessageBundle().getString("all_apps_removed_before_teardown"));
			logger.fine(ShellUtils.getMessageBundle().getString("all_apps_removed_before_teardown"));
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/LocalhostGridAgentBootstrapper;shutdownAgentAndWait(GridServiceAgent,long,TimeUnit);private void shutdownAgentAndWait(final GridServiceAgent agent, final long timeout, final TimeUnit timeunit)
			throws InterruptedException, TimeoutException, CLIException {

		// We need to shutdown the agent after we close the admin to avoid
		// closed exception since the admin
		// still monitors
		// the deployment behind the scenes, we call the direct proxy to the gsa
		// since the admin is closed and
		// we don't
		// want to use objects it generated
		final GSA gsa = ((InternalGridServiceAgent) agent).getGSA();
		try {
			gsa.shutdown();
		} catch (final RemoteException e) {
			if (!NetworkExceptionHelper.isConnectOrCloseException(e)) {
				logger.log(Level.FINER, "Failed to shutdown GSA", e);
				throw new AdminException("Failed to shutdown GSA", e);
			}
		}

		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {

			private boolean messagePublished = false;

			/**
			 * Pings the agent to verify it's not available, indicating it was
			 * shut down.
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {
				if (!messagePublished) {
					final String shuttingDownAgentMessage = ShellUtils.getMessageBundle().getString(
							"shutting_down_cloudify_agent_teardown_localcloud");
					publishEvent(shuttingDownAgentMessage);

					final String shuttingDownManagmentMessage = ShellUtils.getMessageBundle().getString(
                            "shutting_down_cloudify_management");
					publishEvent(shuttingDownManagmentMessage);

					messagePublished = true;
				}
				logger.fine("Waiting for agent to shutdown");
				try {
					gsa.ping();
				} catch (final RemoteException e) {
					// Probably NoSuchObjectException meaning the GSA is going
					// down
					return true;
				}
				publishEvent(null);
				return false;
			}

		});;private void shutdownAgentAndWait(final GridServiceAgent agent, final long timeout, final TimeUnit timeunit)
			throws InterruptedException, TimeoutException, CLIException {

		// We need to shutdown the agent after we close the admin to avoid
		// closed exception since the admin
		// still monitors
		// the deployment behind the scenes, we call the direct proxy to the gsa
		// since the admin is closed and
		// we don't
		// want to use objects it generated
		final GSA gsa = ((InternalGridServiceAgent) agent).getGSA();
		try {
			gsa.shutdown();
		} catch (final RemoteException e) {
			if (!NetworkExceptionHelper.isConnectOrCloseException(e)) {
				logger.log(Level.FINER, "Failed to shutdown GSA", e);
				throw new AdminException("Failed to shutdown GSA", e);
			}
		}

		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {

			private boolean messagePublished = false;

			/**
			 * Pings the agent to verify it's not available, indicating it was
			 * shut down.
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {
				if (!messagePublished) {
					final String shuttingDownAgentMessage = ShellUtils.getMessageBundle().getString(
							"shutting_down_cloudify_agent_teardown_localcloud");
					publishEvent(shuttingDownAgentMessage);

					final String shuttingDownManagmentMessage = ShellUtils.getMessageBundle().getString(
                            "shutting_down_cloudify_management");
					publishEvent(shuttingDownManagmentMessage);

					messagePublished = true;
				}
				logger.fine("Waiting for agent to shutdown");
				try {
					gsa.ping();
				} catch (final RemoteException e) {
					// Probably NoSuchObjectException meaning the GSA is going
					// down
					return true;
				}
				publishEvent(null);
				return false;
			}

		});;private void shutdownAgentAndWait(final GridServiceAgent agent, final long timeout, final TimeUnit timeunit)
			throws InterruptedException, TimeoutException, CLIException {

		// We need to shutdown the agent after we close the admin to avoid
		// closed exception since the admin
		// still monitors
		// the deployment behind the scenes, we call the direct proxy to the gsa
		// since the admin is closed and
		// we don't
		// want to use objects it generated
		final GSA gsa = ((InternalGridServiceAgent) agent).getGSA();
		try {
			gsa.shutdown();
		} catch (final RemoteException e) {
			if (!NetworkExceptionHelper.isConnectOrCloseException(e)) {
				logger.log(Level.FINER, "Failed to shutdown GSA", e);
				throw new AdminException("Failed to shutdown GSA", e);
			}
		}

		createConditionLatch(timeout, timeunit).waitFor(new ConditionLatch.Predicate() {

			private boolean messagePublished = false;

			/**
			 * Pings the agent to verify it's not available, indicating it was shut down.
			 */
			@Override
			public boolean isDone() throws CLIException, InterruptedException {
				if (!messagePublished) {
					final String shuttingDownAgentMessage = ShellUtils.getMessageBundle().getString(
							"shutting_down_cloudify_agent_teardown_localcloud");
					publishEvent(shuttingDownAgentMessage);

					final String shuttingDownManagmentMessage = ShellUtils.getMessageBundle().getString(
							"shutting_down_cloudify_management");
					publishEvent(shuttingDownManagmentMessage);

					messagePublished = true;
				}
				logger.fine("Waiting for agent to shutdown");
				try {
					gsa.ping();
				} catch (final RemoteException e) {
					// Probably NoSuchObjectException meaning the GSA is going
					// down
					return true;
				}
				publishEvent(null);
				return false;
			}

		});
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/LocalhostGridAgentBootstrapper;runGsAgentOnLocalHost(String,String[],String,String,String,String);private void runGsAgentOnLocalHost(final String name, final String[] gsAgentArguments, 
			final String securityProfile, final String securityFilePath, final String keystoreFilePath, 
			final String keystorePassword) throws CLIException, InterruptedException {

		final List<String> args = new ArrayList<String>();
		args.addAll(Arrays.asList(gsAgentArguments));

		String[] command;
		if (isLocalCloud) {
			publishEvent(ShellUtils.getMessageBundle().getString("starting_bootstrap_localcloud"));
			if (isWindows()) {
				command = Arrays.copyOf(WINDOWS_LOCALCLOUD_COMMAND, WINDOWS_LOCALCLOUD_COMMAND.length);
				args.addAll(Arrays.asList(WINDOWS_ARGUMENTS_POSTFIX));
			} else {
				command = Arrays.copyOf(LINUX_LOCALCLOUD_COMMAND, LINUX_LOCALCLOUD_COMMAND.length);
				args.addAll(Arrays.asList(LINUX_ARGUMENTS_POSTFIX));
			}
		} else {
			if (isWindows()) {
				command = Arrays.copyOf(WINDOWS_CLOUD_COMMAND, WINDOWS_CLOUD_COMMAND.length);
				args.addAll(Arrays.asList(WINDOWS_ARGUMENTS_POSTFIX));
			} else {
				command = Arrays.copyOf(LINUX_CLOUD_COMMAND, LINUX_CLOUD_COMMAND.length);
				args.addAll(Arrays.asList(LINUX_ARGUMENTS_POSTFIX));
			}
		}
		if (verbose) {
			final String message = "Starting "
					+ name
					+ (verbose ? ":\n" + StringUtils.collectionToDelimitedString(Arrays.asList(command), " ") + " "
							+ StringUtils.collectionToDelimitedString(args, " ") : "");
			publishEvent(message);
			logger.fine(message);
		}

		publishEvent(ShellUtils.getMessageBundle().getString("starting_cloudify_management"));
		runCommand(command, args.toArray(new String[args.size()]), securityProfile, securityFilePath, keystoreFilePath,
				keystorePassword);;private void runGsAgentOnLocalHost(final String name, final String[] gsAgentArguments, 
			final String securityProfile, final String securityFilePath, final String keystoreFilePath, 
			final String keystorePassword) throws CLIException, InterruptedException {

		final List<String> args = new ArrayList<String>();
		args.addAll(Arrays.asList(gsAgentArguments));

		String[] command;
		if (isLocalCloud) {
			publishEvent(ShellUtils.getMessageBundle().getString("starting_bootstrap_localcloud"));
			if (isWindows()) {
				command = Arrays.copyOf(WINDOWS_LOCALCLOUD_COMMAND, WINDOWS_LOCALCLOUD_COMMAND.length);
				args.addAll(Arrays.asList(WINDOWS_ARGUMENTS_POSTFIX));
			} else {
				command = Arrays.copyOf(LINUX_LOCALCLOUD_COMMAND, LINUX_LOCALCLOUD_COMMAND.length);
				args.addAll(Arrays.asList(LINUX_ARGUMENTS_POSTFIX));
			}
		} else {
			if (isWindows()) {
				command = Arrays.copyOf(WINDOWS_CLOUD_COMMAND, WINDOWS_CLOUD_COMMAND.length);
				args.addAll(Arrays.asList(WINDOWS_ARGUMENTS_POSTFIX));
			} else {
				command = Arrays.copyOf(LINUX_CLOUD_COMMAND, LINUX_CLOUD_COMMAND.length);
				args.addAll(Arrays.asList(LINUX_ARGUMENTS_POSTFIX));
			}
		}
		if (verbose) {
			final String message = "Starting "
					+ name
					+ (verbose ? ":\n" + StringUtils.collectionToDelimitedString(Arrays.asList(command), " ") + " "
							+ StringUtils.collectionToDelimitedString(args, " ") : "");
			publishEvent(message);
			logger.fine(message);
		}

		publishEvent(ShellUtils.getMessageBundle().getString("starting_cloudify_management"));
		runCommand(command, args.toArray(new String[args.size()]), securityProfile, securityFilePath, keystoreFilePath,
				keystorePassword);;private void runGsAgentOnLocalHost(final String name, final String[] gsAgentArguments,
			final String securityProfile, final String securityFilePath, final String keystoreFilePath,
			final String keystorePassword) throws CLIException, InterruptedException {

		final List<String> args = new ArrayList<String>();
		args.addAll(Arrays.asList(gsAgentArguments));

		String[] command;
		if (isLocalCloud) {
			publishEvent(ShellUtils.getMessageBundle().getString("starting_bootstrap_localcloud"));
			if (isWindows()) {
				command = Arrays.copyOf(WINDOWS_LOCALCLOUD_COMMAND, WINDOWS_LOCALCLOUD_COMMAND.length);
				args.addAll(Arrays.asList(WINDOWS_ARGUMENTS_POSTFIX));
			} else {
				command = Arrays.copyOf(LINUX_LOCALCLOUD_COMMAND, LINUX_LOCALCLOUD_COMMAND.length);
				args.addAll(Arrays.asList(LINUX_ARGUMENTS_POSTFIX));
			}
		} else {
			if (isWindows()) {
				command = Arrays.copyOf(WINDOWS_CLOUD_COMMAND, WINDOWS_CLOUD_COMMAND.length);
				args.addAll(Arrays.asList(WINDOWS_ARGUMENTS_POSTFIX));
			} else {
				command = Arrays.copyOf(LINUX_CLOUD_COMMAND, LINUX_CLOUD_COMMAND.length);
				args.addAll(Arrays.asList(LINUX_ARGUMENTS_POSTFIX));
			}
		}
		if (verbose) {
			final String message = "Starting "
					+ name
					+ (verbose ? ":\n" + StringUtils.collectionToDelimitedString(Arrays.asList(command), " ") + " "
							+ StringUtils.collectionToDelimitedString(args, " ") : "");
			publishEvent(message);
			logger.fine(message);
		}

		publishEvent(ShellUtils.getMessageBundle().getString("starting_cloudify_management"));
		runCommand(command, args.toArray(new String[args.size()]), securityProfile, securityFilePath, keystoreFilePath,
				keystorePassword);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/LocalhostGridAgentBootstrapper;getWebservicePort(String,boolean);private int getWebservicePort(String portEnvVriable, boolean isSecureConnection) {
		String port = System.getenv().get(portEnvVriable);
		if (org.apache.commons.lang.StringUtils.isNotBlank(port)) {
			return Integer.parseInt(port);
		} 
		if (portEnvVriable.equals(CloudifyConstants.WEBUI_PORT_ENV_VAR)) {
			if (isSecureConnection){
				return CloudifyConstants.SECURE_WEBUI_PORT;
			} else {
				return CloudifyConstants.DEFAULT_WEBUI_PORT;
			}
		} else {
			if (isSecureConnection){
				return CloudifyConstants.SECURE_REST_PORT;
			} else {
				return CloudifyConstants.DEFAULT_REST_PORT;
			}
		}
		;private int getWebservicePort(String portEnvVriable, boolean isSecureConnection) {
		String port = System.getenv().get(portEnvVriable);
		if (org.apache.commons.lang.StringUtils.isNotBlank(port)) {
			return Integer.parseInt(port);
		} 
		if (portEnvVriable.equals(CloudifyConstants.WEBUI_PORT_ENV_VAR)) {
			if (isSecureConnection){
				return CloudifyConstants.SECURE_WEBUI_PORT;
			} else {
				return CloudifyConstants.DEFAULT_WEBUI_PORT;
			}
		} else {
			if (isSecureConnection){
				return CloudifyConstants.SECURE_REST_PORT;
			} else {
				return CloudifyConstants.DEFAULT_REST_PORT;
			}
		}
		;private int getWebservicePort(final String portEnvVriable, final boolean isSecureConnection) {
		final String port = System.getenv().get(portEnvVriable);
		if (org.apache.commons.lang.StringUtils.isNotBlank(port)) {
			return Integer.parseInt(port);
		}
		if (portEnvVriable.equals(CloudifyConstants.WEBUI_PORT_ENV_VAR)) {
			if (isSecureConnection) {
				return CloudifyConstants.SECURE_WEBUI_PORT;
			} else {
				return CloudifyConstants.DEFAULT_WEBUI_PORT;
			}
		} else {
			if (isSecureConnection) {
				return CloudifyConstants.SECURE_REST_PORT;
			} else {
				return CloudifyConstants.DEFAULT_REST_PORT;
			}
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/LocalhostGridAgentBootstrapper;startAgentOnLocalhostAndWait(String,String,long,TimeUnit);public void startAgentOnLocalhostAndWait(final String securityProfile, final String keystorePassword,
			final long timeout, final TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {

		setIsLocalCloud(false);

		setDefaultNicAddress();

		final ConnectionLogsFilter connectionLogs = new ConnectionLogsFilter();
		connectionLogs.supressConnectionErrors();
		final Admin admin = createAdmin();
		try {
			setLookupDefaults(admin);

			try {
				waitForExistingAgent(admin, WAIT_EXISTING_AGENT_TIMEOUT_SECONDS, TimeUnit.SECONDS);
				throw new CLIException("Agent already running on local machine. Use shutdown-agent first.");
			} catch (final TimeoutException e) {
				// no existing agent running on local machine
			}
			runGsAgentOnLocalHost("agent", AGENT_ARGUMENTS, securityProfile, "" /*securityFilePath*/,
					"" /*keystoreFilePath*/, keystorePassword);

			// wait for agent to start
			waitForNewAgent(admin, timeout, timeunit);
		} finally {
			admin.close();
			connectionLogs.restoreConnectionErrors();
		};public void startAgentOnLocalhostAndWait(final String securityProfile, final String keystorePassword,
			final long timeout, final TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {

		setIsLocalCloud(false);

		setDefaultNicAddress();

		final ConnectionLogsFilter connectionLogs = new ConnectionLogsFilter();
		connectionLogs.supressConnectionErrors();
		final Admin admin = createAdmin();
		try {
			setLookupDefaults(admin);

			try {
				waitForExistingAgent(admin, WAIT_EXISTING_AGENT_TIMEOUT_SECONDS, TimeUnit.SECONDS);
				throw new CLIException("Agent already running on local machine. Use shutdown-agent first.");
			} catch (final TimeoutException e) {
				// no existing agent running on local machine
			}
			runGsAgentOnLocalHost("agent", AGENT_ARGUMENTS, securityProfile, "" /*securityFilePath*/,
					"" /*keystoreFilePath*/, keystorePassword);

			// wait for agent to start
			waitForNewAgent(admin, timeout, timeunit);
		} finally {
			admin.close();
			connectionLogs.restoreConnectionErrors();
		};public void startAgentOnLocalhostAndWait(final String securityProfile, final String keystorePassword,
			final long timeout, final TimeUnit timeunit) throws CLIException, InterruptedException, TimeoutException {

		setIsLocalCloud(false);

		setDefaultNicAddress();

		final ConnectionLogsFilter connectionLogs = new ConnectionLogsFilter();
		connectionLogs.supressConnectionErrors();
		final Admin admin = createAdmin();
		try {
			setLookupDefaults(admin);

			try {
				waitForExistingAgent(admin, WAIT_EXISTING_AGENT_TIMEOUT_SECONDS, TimeUnit.SECONDS);
				throw new CLIException("Agent already running on local machine. Use shutdown-agent first.");
			} catch (final TimeoutException e) {
				// no existing agent running on local machine
			}
			runGsAgentOnLocalHost("agent", AGENT_ARGUMENTS, securityProfile, "" /* securityFilePath */,
					"" /* keystoreFilePath */, keystorePassword);

			// wait for agent to start
			waitForNewAgent(admin, timeout, timeunit);
		} finally {
			admin.close();
			connectionLogs.restoreConnectionErrors();
		}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_cloudify/revisions/rev_f7be7_73143/rev_f7be7-73143;/CLI/src/main/java/org/cloudifysource/shell/installer/LocalhostGridAgentBootstrapper;setCloudFilePath(String);public void setCloudFilePath(final String cloudFilePath) {
		this.cloudFilePath = cloudFilePath;;public void setCloudFilePath(final String cloudFilePath) {
		this.cloudFilePath = cloudFilePath;;public void setCloudFilePath(final String cloudFilePath) {
		this.cloudFilePath = cloudFilePath;
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_f11c1_d7c58/rev_f11c1-d7c58;/src/main/java/redis/clients/jedis/Connection;getObjectMultiBulkReply();public List<Object> getObjectMultiBulkReply() {
        flush();
        pipelinedCommands--;
        return getRawObjectMultiBulkReply();;@SuppressWarnings("unchecked")
    public List<Object> getObjectMultiBulkReply() {
        flush();
        pipelinedCommands--;
        return (List<Object>) Protocol.read(inputStream);;@SuppressWarnings("unchecked")
    public List<Object> getObjectMultiBulkReply() {
	flush();
	pipelinedCommands--;
	return (List<Object>) Protocol.read(inputStream);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_f90b7_c6b03/rev_f90b7-c6b03;/projects/OG-Bloomberg/src/test/java/com/opengamma/bbg/livedata/faketicks/CombiningBloombergLiveDataServerTest;setUpClass();    _server = BloombergLiveDataServerUtils.startTestServer(CombiningBloombergLiveDataServerTest.class,
        new UnionFakeSubscriptionSelector(new BySchemeFakeSubscriptionSelector(ExternalSchemes.BLOOMBERG_BUID_WEAK, ExternalSchemes.BLOOMBERG_TICKER_WEAK), new ByTypeFakeSubscriptionSelector(
            "SWAPTION VOLATILITY"))
        , _unitTestingProvider);;    _server = BloombergLiveDataServerUtils.startTestServer(CombiningBloombergLiveDataServerTest.class,
        new UnionFakeSubscriptionSelector(new BySchemeFakeSubscriptionSelector(ExternalSchemes.BLOOMBERG_BUID_WEAK, ExternalSchemes.BLOOMBERG_TICKER_WEAK), new ByTypeFakeSubscriptionSelector("SWAPTION VOLATILITY"))
    , _unitTestingProvider);;    BySchemeFakeSubscriptionSelector selector1 = new BySchemeFakeSubscriptionSelector(ExternalSchemes.BLOOMBERG_BUID_WEAK, ExternalSchemes.BLOOMBERG_TICKER_WEAK);
    UnionFakeSubscriptionSelector selector = new UnionFakeSubscriptionSelector(selector1, new ByTypeFakeSubscriptionSelector("SWAPTION VOLATILITY"));
    _server = BloombergLiveDataServerUtils.startTestServer(CombiningBloombergLiveDataServerTest.class, selector, _unitTestingProvider);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_f90b7_c6b03/rev_f90b7-c6b03;/projects/OG-Bloomberg/src/test/java/com/opengamma/bbg/livedata/faketicks/CombiningBloombergLiveDataServerTest;testMixedSubscribe();
    unsubscribe(_liveDataClient, listener, instruments);;    
    unsubscribe(_liveDataClient, listener, instruments);;    unsubscribe(_liveDataClient, listener, instruments);
    
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_f90b7_c6b03/rev_f90b7-c6b03;/projects/OG-Bloomberg/src/test/java/com/opengamma/bbg/livedata/faketicks/CombiningBloombergLiveDataServerTest;testBrokenSubscribe();
    unsubscribe(_liveDataClient, listener, instruments);;    
    unsubscribe(_liveDataClient, listener, instruments);;    unsubscribe(_liveDataClient, listener, instruments);
    
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_f4122_ed5b6/rev_f4122-ed5b6;/src/java/voldemort/client/AbstractStoreClientFactory;bootstrapMetadataWithRetries(String,URI[]);                if(nTries < this.maxBootstrapRetries) {
                    int backOffTime = 5 * nTries;
                    logger.warn("Failed to bootstrap will try again after " + backOffTime + "s.");
                    try {
                        Thread.sleep(backOffTime * 1000);
                    } catch(InterruptedException e1) {
                        throw new RuntimeException(e1);
                    };                int backOffTime = 5 * nTries;
                logger.warn("Failed to bootstrap will try again after" + backOffTime);
                try {
                    Thread.sleep(backOffTime * 1000);
                } catch(InterruptedException e1) {
                    throw new RuntimeException(e1);;                int backOffTime = 5 * nTries;
                logger.warn("Failed to bootstrap will try again after " + backOffTime);
                try {
                    Thread.sleep(backOffTime * 1000);
                } catch(InterruptedException e1) {
                    throw new RuntimeException(e1);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_f4548_e4ee2/rev_f4548-e4ee2;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkConnections();	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "bar");
	assertEquals("bar", jedis.get("foo"));
	pool.returnResource(jedis);
	pool.destroy();
    };	Jedis jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.set("foo", "bar");
	assertEquals("bar", jedis.get("foo"));
	pool.returnResource(jedis);
	pool.destroy();
    };		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "bar");
		assertEquals("bar", jedis.get("foo"));
		pool.returnResource(jedis);
		pool.destroy();
	}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_f4548_e4ee2/rev_f4548-e4ee2;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkConnectionWithDefaultPort();	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "bar");
	assertEquals("bar", jedis.get("foo"));
	pool.returnResource(jedis);
	pool.destroy();
    };	Jedis jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.set("foo", "bar");
	assertEquals("bar", jedis.get("foo"));
	pool.returnResource(jedis);
	pool.destroy();
    };		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "bar");
		assertEquals("bar", jedis.get("foo"));
		pool.returnResource(jedis);
		pool.destroy();
	}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_f4548_e4ee2/rev_f4548-e4ee2;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkJedisIsReusedWhenReturned();	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "0");
	pool.returnResource(jedis);;	Jedis jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.set("foo", "0");
	pool.returnResource(jedis);;		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "0");
		pool.returnResource(jedis);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_f4548_e4ee2/rev_f4548-e4ee2;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkJedisIsReusedWhenReturned();	jedis = pool.getResource(200);
	jedis.incr("foo");
	pool.returnResource(jedis);
	pool.destroy();
    };	jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.incr("foo");
	pool.returnResource(jedis);
	pool.destroy();
    };		jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.incr("foo");
		pool.returnResource(jedis);
		pool.destroy();
	}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_f4548_e4ee2/rev_f4548-e4ee2;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolRepairedWhenJedisIsBroken();	Jedis jedis = pool.getResource(200);
	jedis.quit();
	pool.returnBrokenResource(jedis);;	Jedis jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.quit();
	pool.returnBrokenResource(jedis);;		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.quit();
		pool.returnBrokenResource(jedis);
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_f4548_e4ee2/rev_f4548-e4ee2;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolRepairedWhenJedisIsBroken();	jedis = pool.getResource(200);
	jedis.incr("foo");
	pool.returnResource(jedis);
	pool.destroy();
    };	jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.incr("foo");
	pool.returnResource(jedis);
	pool.destroy();
    };		jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.incr("foo");
		pool.returnResource(jedis);
		pool.destroy();
	}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_f4548_e4ee2/rev_f4548-e4ee2;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolOverflow();	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "0");;	Jedis jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.set("foo", "0");;		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "0");
/home/ines/gjcc/fpfnanalysis/samplerpl/java_jedis/revisions/rev_f4548_e4ee2/rev_f4548-e4ee2;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolOverflow();	Jedis newJedis = pool.getResource(200);
	newJedis.incr("foo");
    };	Jedis newJedis = pool.getResource(200);
	newJedis.auth("foobared");
	newJedis.incr("foo");
    };		Jedis newJedis = pool.getResource(200);
		newJedis.auth("foobared");
		newJedis.incr("foo");
	}
/home/ines/gjcc/fpfnanalysis/samplerpl/java_voldemort/revisions/rev_f9687_83bfb/rev_f9687-83bfb;/src/java/voldemort/client/AbstractStoreClientFactory;getFailureDetector();        if (result == null) {
            String clusterXml = bootstrapMetadataWithRetries(MetadataStore.CLUSTER_KEY, bootstrapUrls);
            Cluster cluster = clusterMapper.readCluster(new StringReader(clusterXml), false);;        if (result == null) {
            String clusterXml = bootstrapMetadataWithRetries(MetadataStore.CLUSTER_KEY, bootstrapUrls);
            Cluster cluster = clusterMapper.readCluster(new StringReader(clusterXml));;        if(result == null) {
            String clusterXml = bootstrapMetadataWithRetries(MetadataStore.CLUSTER_KEY,
                                                             bootstrapUrls);
            Cluster cluster = clusterMapper.readCluster(new StringReader(clusterXml));
/home/ines/gjcc/fpfnanalysis/samplerpl/java_ogplatform/revisions/rev_fc39b_c831c/rev_fc39b-c831c;/projects/OG-Financial/src/com/opengamma/financial/analytics/conversion/FixedIncomeConverterDataProvider;getIndexTimeSeries(InterestRateInstrumentType,SwapLeg,ZonedDateTime,ZonedDateTime,HistoricalTimeSeriesSource);      if (type == InterestRateInstrumentType.SWAP_FIXED_IBOR || type == InterestRateInstrumentType.SWAP_FIXED_CMS ||
          type == InterestRateInstrumentType.SWAP_IBOR_CMS || type == InterestRateInstrumentType.SWAP_IBOR_CMS ||
          type == InterestRateInstrumentType.SWAP_CMS_CMS || type == InterestRateInstrumentType.SWAP_FIXED_IBOR_WITH_SPREAD) {;      if (type == InterestRateInstrumentType.SWAP_FIXED_IBOR || type == InterestRateInstrumentType.SWAP_FIXED_CMS ||
          type == InterestRateInstrumentType.SWAP_IBOR_CMS || type == InterestRateInstrumentType.SWAP_IBOR_CMS ||
          type == InterestRateInstrumentType.SWAP_CMS_CMS) {;      if (type == InterestRateInstrumentType.SWAP_FIXED_IBOR || type == InterestRateInstrumentType.SWAP_FIXED_CMS || type == InterestRateInstrumentType.SWAP_IBOR_CMS
          || type == InterestRateInstrumentType.SWAP_IBOR_CMS || type == InterestRateInstrumentType.SWAP_CMS_CMS) {
/home/ines/gjcc/fpfnanalysis/samplerpl/java_gradle/revisions/rev_ff519_092e3/rev_ff519-092e3;/subprojects/core/src/main/groovy/org/gradle/api/tasks/bundling/Tar;Tar();        Instantiator instantiator = getServices().get(Instantiator.class);
        FileResolver fileResolver = getServices().get(FileResolver.class);
        action = instantiator.newInstance(TarCopyActionImpl.class, this, instantiator, fileResolver);
        getConventionMapping().map("extension", new Callable<Object>() {;        Instantiator instantiator = getServices().get(Instantiator.class);
        FileResolver fileResolver = getServices().get(FileResolver.class);
        action = instantiator.newInstance(TarCopyActionImpl.class, this, instantiator, fileResolver);
        getConventionMapping().map("extension", new Callable<Object>(){;        getConventionMapping().map("extension", new Callable<Object>(){
